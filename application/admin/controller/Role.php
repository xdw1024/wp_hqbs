<?php
/**
 * Created by PhpStorm.
 * User: zzwu
 * Date: 2017/3/31
 * Time: 21:35
 */

namespace app\admin\controller;

use app\admin\model\SysRoleMenu;
use think\Cache;
use think\Controller;
use think\Db;
use think\Request;

class Role extends Adminbase
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if (!zw_get_user_role_prototype())
        {
            $this->error('对不起，您没有此操作权限，不允许进行此操作');
        }
    }

    /**
     * app角色设置
     **/
    public function index()
    {
        $roles = Db::view('party_role', '*')
            ->view('party_role_type', 'party_role_type_name', 'party_role_type.party_role_type_id=party_role.party_role_type_id')
            ->order('sort_num', 'desc')
            ->paginate(15);
        $party_role_type = Db::view('party_role_type', '*')->select();
        $this->assign('party_role_type', $party_role_type);
        $this->assign('roles', $roles);
        return $this->fetch();
    }

    /**
     * 管理员角色设置
     **/
    public function admin()
    {
        if (!zw_get_user_role_prototype())
        {
            $this->error('此页面只允许超级管理员操作，您没有此操作权限');
        }
        $menus = Db::view('admin_menu', 'menu_id,menu_name')->order('sort_num', 'desc')->select();
        $roles = Db::view('sys_role', '*')->order('sort_num', 'desc')->paginate(15);
        $this->assign('roles', $roles);
        $this->assign('menus', $menus);
        return $this->fetch();
    }

    /**
     * 功能：保存管理角色
     * @time 20170410
     * @author zzwu
     */
    public function saveAdminRole()
    {
        if (!input('post.role_name'))
        {
            return zw_sprint_result('请输入角色名字', '', FAIL_CODE);
        }
        $role_data = [
            'sys_role_name' => Request::instance()->post('role_name'),
            'sort_num'     => Request::instance()->post('sort_num'),
            'sys_role_describe'     => Request::instance()->post('description'),
            'role_prototype'     => Request::instance()->post('role_prototype')
        ];
        if ('insert' === Request::instance()->post('role_status'))
        {
            $result = Db::name('sys_role')->insertGetId($role_data);
        }else{
            $result = Db::name('sys_role')
                ->where(['sys_role_id' => Request::instance()->post('role_id')])
                ->update($role_data);
        }
        return $result ? zw_sprint_result('操作成功') : zw_sprint_result('操作失败', '', FAIL_CODE);
    }

    /**
     * 功能：删除管理角色
     * @time 20170410
     * @author zzwu
     */
    public function deleteAdminRole()
    {
        if (!input('post.id'))
        {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        $where = ['sys_role_id' => Request::instance()->post('id')];
        $user_role = Db::view('sys_user_role','id')->where($where)->select();
        if (is_array($user_role) && count($user_role) != 0)
        {
            return zw_sprint_result('删除失败，当前角色下面拥有用户，不能直接删除', '', FAIL_CODE);
        }
        $result = Db::name('sys_role')
            ->where($where)
            ->where('role_prototype', 'NEQ', 1)
            ->delete();
        return $result ? zw_sprint_result('删除成功', $result) : zw_sprint_result('删除失败, 超级管理员不允许直接删除', '', FAIL_CODE);
    }

    /**
     * 功能：获取编辑后台角色
     * @time 20170410
     * @author zzwu
     */
    public function editAdminRole()
    {
        if (!input('post.id'))
        {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        $result = Db::view('sys_role', '*')
            ->where(['sys_role_id' => Request::instance()->post('id')])
            ->find();
        return (is_array($result) && count($result) !== 0 ) ? zw_sprint_result('获取成功', $result) : zw_sprint_result('获取失败', '', FAIL_CODE);
    }

    /**
     * 功能：保存角色权限
     * @time 20170410
     * @author zzwu
     */
    public function saveAdminRolePower()
    {
        if (!input('post.role_id'))
        {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        Cache::clear();
        $menus = Request::instance()->post('menus/a');
        if (is_array($menus) && count($menus) !== 0)
        {
            Db::name('sys_role_menu')->where(['sys_role_id' => Request::instance()->post('role_id')])->delete();
            $role_data = [];
            foreach ($menus as $menu) {
                $role_data[] = [
                    'sys_role_id'  => Request::instance()->post('role_id'),
                    'menu_id'     => $menu
                ];
            }
            $SysRoleMenu = new SysRoleMenu();
            $result = $SysRoleMenu->saveAll($role_data, false);
            return $result ? zw_sprint_result('操作成功') : zw_sprint_result('操作失败', '', FAIL_CODE);
        }
        return zw_sprint_result('请选择菜单', '', FAIL_CODE);
    }

    public function editRolePower()
    {
        if (!input('post.id'))
        {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        $result = Db::view('admin_menu', 'menu_id,menu_name')
            ->view('sys_role_menu', 'sys_role_id', 'admin_menu.menu_id=sys_role_menu.menu_id')
            ->where(['sys_role_id' => Request::instance()->post('id')])
            ->order('sort_num', 'desc')
            ->select();
        return $result ? zw_sprint_result('获取成功', $result) : zw_sprint_result('获取成功', []);
    }

    /**
     * 删除党员角色
     **/
    public function deleteAppRole()
    {
        if (!input('post.id'))
        {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        $result = Db::name('party_role')
            ->where(['role_id' => Request::instance()->post('id')])
            ->delete();
        return $result ? zw_sprint_result('删除成功', $result) : zw_sprint_result('删除失败', '', FAIL_CODE);
    }

    /**
     * 保存党员角色
     * */
    public function saveAppRole()
    {
        if (!input('post.role_name'))
        {
            return zw_sprint_result('请输入角色名字', '', FAIL_CODE);
        }
        $role_data = [
            'role_name' => Request::instance()->post('role_name'),
            'sort_num'     => Request::instance()->post('sort_num'),
            'role_description'     => Request::instance()->post('description'),
            'role_status'     => Request::instance()->post('role_status'),
            'party_role_type_id'     => Request::instance()->post('party_role_type')
        ];
        if ('insert' === Request::instance()->post('action_status'))
        {
            $result = Db::name('party_role')->insertGetId($role_data);
        }else{
            $result = Db::name('party_role')
                ->where(['role_id' => Request::instance()->post('role_id')])
                ->update($role_data);
        }
        return $result ? zw_sprint_result('操作成功') : zw_sprint_result('操作失败', '', FAIL_CODE);
    }

    /**
     * 编辑党员角色
     * */
    public function editAppRole()
    {
        if (!input('post.id'))
        {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        $result = Db::view('party_role', '*')
            ->where(['role_id' => Request::instance()->post('id')])
            ->find();
        return (is_array($result) && count($result) !== 0 ) ? zw_sprint_result('获取成功', $result) : zw_sprint_result('获取失败', '', FAIL_CODE);
    }

    /**
     * 党员角色搜索
     * */
    public function searchrole()
    {
        //if (!input('get.search_info'))
        //{
        //    return zw_sprint_result('请输入搜索内容', '', FAIL_CODE);
        //}
        $map['role_name|party_role_type.party_role_type_name|role_description']  = ['like','%'.Request::instance()->get('search_info').'%'];
        $result = Db::view('party_role', '*')
            ->view('party_role_type', 'party_role_type_name', 'party_role_type.party_role_type_id=party_role.party_role_type_id')
            ->where($map)
            ->order('sort_num', 'desc')
            ->paginate(15, false, [
                'type'=> 'app\admin\driver\ZzwuAjaxPage',
                'var_page' => 'page',
                'query' => Request::instance()->param()
            ]);
        $page = $result->render();
        $result = $result->all();
        return  zw_sprint_result('获取成功', ['data' => $result, 'page' => $page]);
    }

    /**
     * app党员角色绑定（分配）
     */
    public function assignAppRole(){
        if (!input('param.id'))
        {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        $role = Db::name('party_role')->where('role_id',input('param.id'))->find();
        $role_members = Db::view('party_member_role pmr', '*')
            ->view('party_member pm','name,user_name,sex','pm.party_member_id=pmr.party_member_id','left')
            ->view('party_member_org', 'id', 'party_member_org.party_member_id=pm.party_member_id','left')
            ->view('party_org po','party_org_name,party_org_id','po.party_org_id=party_member_org.party_org_id','left')
            ->where(['role_id' => Request::instance()->param('id')])
            ->paginate(10);
        $role_member_ids = null;
        if (is_array($role_members) && count($role_members) !== 0) {
            foreach ($role_members as $m) {
                $role_member_ids[] = $m['party_member_id'];
            }
        }
        $map = array();
        if($role_member_ids){
            $map['party_member_id'] = ['not in',implode(',',$role_member_ids)];
        }
        $party_members = Db::name('party_member')->where($map)->select();
        $this->assign('role',$role);
        $this->assign('role_members',$role_members);
        $this->assign('party_members',$party_members);
        return $this->fetch();
    }

    /**
     * 保存党员角色绑定
     */
    public function saveAppRoleMember(){
        if (!input('post.role_id')){
            return zw_sprint_result('无法获取节点信息，请刷新后重试', '', FAIL_CODE);
        }
        $party_members = Request::instance()->post('party_members/a');
        $role_members = [];
        foreach ($party_members as $v) {
            $role_members[] = [
                'party_member_id' => intval($v),
                'role_id' => intval(Request::instance()->post('role_id')),
            ];
        }
        $result = Db::name('party_member_role')->insertAll($role_members);
        return $result?zw_sprint_result('关联成功', $result): zw_sprint_result('关联失败', $result, FAIL_CODE);
    }

    /**
     * 取消党员角色绑定
     */
    public function deleteAppRoleMember(){
        if (!input('post.role_id'))
        {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        $result = Db::name('party_member_role')
            ->where(['role_id' => Request::instance()->post('role_id')])
            ->where(['party_member_id' => Request::instance()->post('party_member_id')])
            ->delete();
        return $result ? zw_sprint_result('删除成功', $result) : zw_sprint_result('删除失败', '', FAIL_CODE);
    }

    /**
     * 管理员角色搜索
     * */
    public function searchsysrole()
    {
        //if (!input('get.search_info'))
        //{
        //    return zw_sprint_result('请输入搜索内容', '', FAIL_CODE);
        //}
        $map['sys_role_name|sys_role_describe']  = ['like','%'.Request::instance()->get('search_info').'%'];
        $result = Db::view('sys_role', '*')
            ->where($map)
            ->order('sort_num', 'desc')
            ->paginate(15, false, [
                'type'=> 'app\admin\driver\ZzwuAjaxPage',
                'var_page' => 'page',
                'query' => Request::instance()->param()
            ]);
        $page = $result->render();
        $result = $result->all();
        return  zw_sprint_result('获取成功', ['data' => $result, 'page' => $page]);
    }
}