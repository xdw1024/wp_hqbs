<?php
/**
* 用户中心
*
* @author  韦鲲鹏
* @date  20161129
*/

namespace app\admin\controller;

use think\Db;
use think\Controller;
use think\Request;

class Org extends Adminbase
{
//    public function _initialize()
//    {
//        parent::_initialize(); // TODO: Change the autogenerated stub
//        if (!zw_get_user_role_prototype())
//        {
//            $this->error('对不起，您没有此操作权限，不允许进行此操作');
//        }
//    }

    public function saveFile()
    {
        set_time_limit(0);
        // 获取表单上传文件
        $file = request()->file('file');

        $info = $file->move(UPLOAD_FOLDER . 'upload');

        if(!$info){
            // 上传失败获取错误信息
            return zw_sprint_result($file->getError(), '', FAIL_CODE);
        }
        // 成功上传后 获取上传信息
        $fullName = $info->getRealPath();
        $ext = $info->getExtension(); //文件扩展名
        if (in_array(strtolower($ext), ['csv']))
        $content = file_get_contents($fullName);
        if (!$content)
            return zw_sprint_result('无法获取文件信息', '', FAIL_CODE);
        if ('UTF-8' != mb_detect_encoding($content, ['UTF-8']))
            return zw_sprint_result('文件编码格式不是UTF-8，请转换为UTF-8无BOM编码格式', '', FAIL_CODE);
        @unlink($fullName);
        $content = explode("\r\n", $content);
        $result = [];
        foreach($content as $value)
        {
            $value1 = explode(",", $value);
            if (is_array($value1) && count($value1) !=2)
                continue;
            switch($this->check($value1[0], $value1[1]))
            {
                case -3:
                    $result[] = ['message' => '编号错误', 'code' => $value1[0], 'name' => $value1[1]];
//                    file_put_contents(ROOT_PATH . '../uploads/user.txt', $value.",编号错误\r\n", FILE_APPEND);
                    break;
                case -1;
                    $result[] = ['message' => '上级节点不存在', 'code' => $value1[0], 'name' => $value1[1]];
//                    file_put_contents(ROOT_PATH . '../uploads/user.txt', $value.",上级节点不存在\r\n", FILE_APPEND);
                    break;
                case  0:
                    $result[] = ['message' => '插入失败', 'code' => $value1[0], 'name' => $value1[1]];
//                    file_put_contents(ROOT_PATH . '../uploads/user.txt', $value.",当前节点插入失败\r\n", FILE_APPEND);
                    break;
            }
        }
        //return (ROOT_PATH . '../uploads/user.txt');
        return zw_sprint_result('上传成功', $result);
    }

    //测试
    private function check($number, $name)
    {
        $number = trim($number);
        preg_match('|(\d+)|',$number,$r);
        $number = $r[0];
        //检查数字长度
        if(strlen($number) != 12)
        {
            //编号错误
            return -3;
        }
        $province = $number[0].$number[1];
        $city = $number[2].$number[3];
        $county = $number[4].$number[5];
        $num1 = $number[6].$number[7].$number[8];
        $num2 = $number[9].$number[10].$number[11];

        if($num2 !== "000")
        {
            //上级组织为 $num1级
            $superOrg = $province.$city.$county.$num1."000";
            return $this->insert($superOrg, $number, $name);
        } else if($num1 !== "000")
        {
            //上级组织为 $county级
            $superOrg = $province.$city.$county."000000";
            return $this->insert($superOrg, $number, $name);
        } else if($county !== "00")
        {
            //上级组织为 $county级
            $superOrg = $province.$city."00000000";
            return $this->insert($superOrg, $number, $name);
        } else if($city !== "00")
        {
            //上级组织为 $county级
            $superOrg = $province."0000000000";
            return $this->insert($superOrg, $number, $name);
        }
        //未知错误
        return -4;
    }

    //测试
    private function insert($superOrg, $number, $name)
    {
        //当前节点是否存在
        $result = Db::view('party_org', '*')->where(['party_org_number' => $number])->select();
        if (is_array($result) && count($result) != 0)
        {
            //当前节点已存在
            return -2;
        }

        //通过上级节点的编码获取上级节点的信息
        $result = Db::view('party_org', '*')->where(['party_org_number' => $superOrg])->select();
        if (!(is_array($result) && count($result) != 0))
        {
            //上级节点不存在
            return -1;
        }

        //插入节点
        $pre_node = $result[0];
        //添加子节点
        Db::name('party_org')->where('lft', '>', $pre_node['lft'])->update(['lft' => ['exp', 'lft+2']]);
        Db::name('party_org')->where('rgt', '>', $pre_node['lft'])->update(['rgt' => ['exp', 'rgt+2']]);
        $result = Db::name('party_org')->insertGetId([
            'parent_org_id' => $pre_node['party_org_id'],
            'party_org_name' => $name,
            'party_org_number' => $number,
            'pay_sign' => 0,
            'level' => $pre_node['level'] + 1,
            'lft' => $pre_node['lft']+1,
            'rgt' => $pre_node['lft']+2,
            'rank' => 1,
        ]);
        if($result)
        {
            return 1;
        } else {
            //当前节点插入失败
            return 0;
        }
    }

    /**
	* 首页显示
	* 
	* @author  韦鲲鹏
	* @date  20161130
	*/  
    public function index()
    {
        //判断根结点存在与否
        ($this->getRootNodeId() === False) ? $this->addRootNode("root") : $this->getRootNodeId();

        $tree_result = [];

        if (!zw_get_user_role_prototype())
        {
            $trees = zw_get_content_org_subordinate();
        }
        else
        {
            // 获取 $root_id 节点的所有子孙节点
            $trees = Db::view('party_org', '*')
//                ->order('rank', 'desc')
//                ->where('level', '<=', 3)
                ->order('party_org_number')
                ->select();
        }
//var_dump($trees);die();
        if (is_array($trees) && count($trees) !== 0)
        {
            foreach($trees as $key=>$row)
            {
                // 默认展开两级 Mao 20170427
                $is_open = ($row['level'] > 2) ? false : true;
                // 判断是否有子节点
                $is_parent = ($row['rgt'] == $row['lft'] + 1) ? false : true;
                $tree_result[] = [
                    'id' => $row['party_org_id'],
                    'pId' => $row['parent_org_id'],
                    'name' => $row['party_org_name'],
                    'open' => $is_open,
                    'isParent' => $is_parent
                ];
            }
        }
        $org_type = Db::view('party_org_type', '*')->select();
//        $app_menu = Db::view('app_menu', 'app_menu_id, menu_name')->select();
//        $address = Db::view('address', '*')->select();
		$this->assign('org', json_encode($tree_result));
		$this->assign('org_type', $org_type);
//		$this->assign('app_menu', $app_menu);
//		$this->assign('address', $address);
//		return $this->fetch();
        return zw_get_user_role_prototype() ? $this->fetch('admin') : $this->fetch('index');
	}

    /**
     * 获取某个节点的下一层子节点
     *
     * @author  Mao
     * @date  20170427
     */
    public function getChildNodes()
    {
        $level = input('post.level/d');
        $node_id = input('post.node_id/d');
        // 当前节点
        $current_node = Db::name('party_org')->where('party_org_id', $node_id)->find();
        // print_r($current_node);
        if($level == 0){
            // 获取当前节点的下一层子节点
            $next_level = $current_node['level'] + 1;
        }else{
            $next_level = $level;
        }
        $node_list = Db::name('party_org')
            ->where('level', 'between',array($current_node['level'], $next_level))
            ->where('lft', '>', $current_node['lft'])
            ->where('rgt', '<', $current_node['rgt'])
            ->select();
        $childNodes = array();
        foreach ($node_list as $key => $node) {
            $childNodes[] = array(
                'id' => $node['party_org_id'],
                'pId' => $node['parent_org_id'],
                'name' => $node['party_org_name'],
                'open' => false,
                'isParent' => $node['lft'] + 1 != $node['rgt'],
                'level' => $node['level']
            );
        }
       // print_r($childNodes);
        return zw_sprint_result('ok', $childNodes);
    }

    /**
     * 根据节点名称搜索
     *
     * @author  Mao
     * @date  20170427
     */
    public function searchNodes()
    {
        $keywords = input('post.keywords/s');
        $node_list = Db::name('party_org')->where('party_org_name','like', "%$keywords%")->select();
//        print_r($result);
        $searchNodes = array();
        foreach ($node_list as $key => $node) {
            $searchNodes[] = array(
                'id' => $node['party_org_id'],
                'pId' => $node['parent_org_id'],
                'name' => $node['party_org_name'],
                'level' => $node['level'],
                'open' => false,
                'isParent' => $node['lft'] + 1 != $node['rgt']
            );
        }
        // 获取第一个节点的各个父节点
        if (!empty($searchNodes) && $searchNodes[0]['pId'] != -1) {
            $parent_node_ids = array();
            // 寻找第一个节点的父节点
            $node = Db::name('party_org')->where('party_org_id', $searchNodes[0]['pId'])->find();
            while (!empty($node) && $node['parent_org_id'] != -1) {
                $parent_node_ids[] = $node['party_org_id'];
                $node = Db::name('party_org')->where('party_org_id',$node['parent_org_id'])->find();
            }
            $searchNodes[0]['parents'] = $parent_node_ids;
        }
        return zw_sprint_result('ok', $searchNodes);
    }
    /**
     * 根据节点ID获取当前节点的信息
     * @param $node_id int 节点id
     * @return array | bool 节点信息(不存在则返回空)
     */
    private function getNode($node_id)
    {
        $result = Db::view('party_org', '*')->where(['party_org_id' => $node_id])->select();
        if (is_array($result) && count($result) != 0)
        {
            return reset($result);
        }
        return false;
    }

    /**
     * 添加根节点
     * @param $name string 节点的名称
     * @return int | bool 参数错误返回false(注意0和false的区别)
     */
    private function addRootNode($name)
    {
        $result = Db::name('party_org')->insertGetId([
            'parent_org_id' => '-1',
            'party_org_name' => $name,
            'pay_sign' => 0,
            'level' => '1',
            'lft' => '1',
            'rgt' => '2',
        ]);
        return $result ? $result : false;
    }

    /**
     * 获取根节点
     * @return bool | array 存在返回节点，不存在则返回False
     */
    private function getRootNodeId()
    {
        $result = Db::view('party_org', 'party_org_id')->where(['parent_org_id' => '-1'])->select();
        if (is_array($result) && count($result) != 0)
        {
            return reset($result)['party_org_id'];
        }
        return false;
    }

    /**
     * 插入一个新的节点
     * @return string 修改状态
     */
    public function insertNode()
    {
        if (!input('post.treeNodeId'))
        {
            return zw_sprint_result('无法获取节点信息，请刷新后重试', '', FAIL_CODE);
        }
        $node_id = Request::instance()->post('treeNodeId');
        $name = Request::instance()->post('treeNodeName');
        $pre_node = $this->getNode($node_id);
        if(!$pre_node)
        {
            return zw_sprint_result('无法获取节点信息，添加失败', '', FAIL_CODE);
        }
        //添加子节点
        Db::name('party_org')->where('lft', '>', $pre_node['lft'])->update(['lft' => ['exp', 'lft+2']]);
        Db::name('party_org')->where('rgt', '>', $pre_node['lft'])->update(['rgt' => ['exp', 'rgt+2']]);
        $result = Db::name('party_org')->insertGetId([
            'parent_org_id' => $pre_node['party_org_id'],
            'party_org_name' => $name,
            'pay_sign' => 0,
            'level' => $pre_node['level'] + 1,
            'lft' => $pre_node['lft']+1,
            'rgt' => $pre_node['lft']+2,
            'rank' => 1,
        ]);
        return $result ? zw_sprint_result('插入成功', $result) : zw_sprint_result('插入失败', '', FAIL_CODE);
    }

    /**
     * 根据ID获取当前节点的信息修改名字
     * @return string 修改状态
     */
    public function renameNode()
    {
        if (!input('post.treeNodeId'))
        {
            return zw_sprint_result('无法获取节点信息，请刷新后重试', '', FAIL_CODE);
        }
        $node_id = Request::instance()->post('treeNodeId');
        $name = Request::instance()->post('treeNodeName');
        $result = Db::name('party_org')->where(['party_org_id' => $node_id])->update(['party_org_name' => $name]);
        return $result ? zw_sprint_result('重命名成功') : zw_sprint_result('重命名失败', '', FAIL_CODE);
    }

    /**
     * 删除节点
     * $nodeId: 节点的ID
     * 返回值：无
     */
    public function deleteNode()
    {
        if (!input('post.treeNodeId'))
        {
            return zw_sprint_result('无法获取节点信息，请刷新后重试', '', FAIL_CODE);
        }
        $node_id = Request::instance()->post('treeNodeId');

        $node = $this->getNode($node_id);
        if(empty($node))
        {
            return zw_sprint_result('无法获取节点信息，删除失败', '', FAIL_CODE);
        }
        //删除所有子节点
        Db::name('party_org')->where('lft', '>=', $node['lft'])->where('rgt', '<=', $node['rgt'])->delete();
        //中间缺少的数
        $number = $node['rgt'] - $node['lft'] + 1;
        //后续节点lft减中间缺少的数
        Db::name('party_org')->where('lft', '>', $node['rgt'])->update(['lft' => ['exp', "lft-$number"]]);
        //后续节点rgt减中间缺少的数
        $result = Db::name('party_org')->where('rgt', '>', $node['rgt'])->update(['rgt' => ['exp', "rgt-$number"]]);

        return $result ? zw_sprint_result('删除成功') : zw_sprint_result('删除失败', '', FAIL_CODE);
    }

    /**
     * 保存栏目附加属性，如icon，类型
     **/
    public function saveOrgAttribute()
    {
        if (!input('post.party_org_id'))
        {
            return zw_sprint_result('无法获取节点信息，请刷新后重试', '', FAIL_CODE);
        }
        $result = Db::name('party_org')
            ->where(['party_org_id' => Request::instance()->post('party_org_id')])
            ->update([
                'party_org_name' => Request::instance()->post('party_org_name'),
//                'pay_sign' => Request::instance()->post('pay_sign'),
                'party_type_id' => Request::instance()->post('party_type'),
//                'app_menu' => unserialize(Request::instance()->post('app_menu\a')),
//                'address_id' => Request::instance()->post('org_address'),
//                'rank' => Request::instance()->post('rank'),
                'party_org_number' => Request::instance()->post('party_org_number'),
            ]);
        return $result ? zw_sprint_result('保存成功') : zw_sprint_result('保存失败', $result, FAIL_CODE);
    }

    /**
     * 获取节点信息进行设置
     **/
    public function getOrg()
    {
        if (!input('post.org_id'))
        {
            return zw_sprint_result('无法获取节点信息，请刷新后重试', '', FAIL_CODE);
        }
        $result = Db::view('party_org', '*')
            ->where([
                'party_org_id' => Request::instance()->post('org_id')
            ])
            ->find();
        return (is_array($result) && count($result) != 0) ? zw_sprint_result('获取成功', $result) : zw_sprint_result('获取失败', $result, FAIL_CODE);
    }
}
