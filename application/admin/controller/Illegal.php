<?php
/**
 * Created by PhpStorm.
 * User: zzwu
 * Date: 2017/3/31
 * Time: 21:35
 */

namespace app\admin\controller;

use app\admin\model\SysRoleMenu;
use think\Cache;
use think\Controller;
use \think\Session;
use \think\Cookie;
use think\Config;
use think\Db;
use think\Request;

class Illegal extends Adminbase
{
    //public function _initialize()
    //{
    //    parent::_initialize(); // TODO: Change the autogenerated stub
    //    if (!zw_get_user_role_prototype())
    //    {
    //        $this->error('对不起，您没有此操作权限，不允许进行此操作');
    //    }
    //}

    /**
     * 非法入境管理
     * @time 20170518
     * @author yxf
     **/
    public function index()
    {
        if (zw_get_user_role_prototype()) {
            $illegal = Db::view('bg_illegal_immigration a', '*')
                ->view('party_org b', 'party_org_name', 'b.party_org_id=a.org_id')
                ->view('bg_illegal_immigration_seized_way c', 'seized_name', 'c.seized_way_id=a.seized_way_id')
                ->where(['a.status' => 1])
                ->order('a.illegal_id', 'desc')
                ->paginate(10);
        } else {
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['a.org_id'] = ['in', $party_org_ids];
            }
            $illegal = Db::view('bg_illegal_immigration a', '*')
                ->view('party_org b', 'party_org_name', 'b.party_org_id=a.org_id')
                ->view('bg_illegal_immigration_seized_way c', 'seized_name', 'c.seized_way_id=a.seized_way_id')
                ->where(['a.status' => 1])
                ->where($map)
                ->order('a.illegal_id', 'desc')
                ->paginate(10);
        }
        $userid = lw_get_current_admin_id();
        $org = Db::name('manage_account')->alias('m')
            ->field('po.party_org_name,po.party_org_id,m.maccount_id')
            ->join('hq_party_org po', 'po.party_org_id=m.party_org_id', 'LEFT')
            ->where('m.maccount_id', lw_get_current_admin_id())
            ->find();
        $way = Db::view('bg_illegal_immigration_seized_way', '*')->order('seized_way_id')->select();
        $this->assign('illegal', $illegal);
        $this->assign('way', $way);
        $this->assign('org', $org);
        return $this->fetch();
    }

    /**
     * 功能：删除非法入境信息
     * @time 20170518
     * @author yxf
     */
    public function deleteillegal()
    {
        if (!input('post.id')) {
            return zw_sprint_result('无法识别的信息条目，请使用正确途径操作', '', FAIL_CODE);
        }
        $where = ['illegal_id' => Request::instance()->post('id')];
        $data = ['status' => 0];
        $result = Db::name('bg_illegal_immigration')
            ->where($where)
            ->update($data);
        Cache::clear();
        return $result ? zw_sprint_result('删除成功', $result) : zw_sprint_result('删除失败, 超级管理员不允许直接删除', '', FAIL_CODE);
    }

    /**
     * 功能：新增非法入境信息
     * @time 20170518
     * @author yxf
     */
    public function addillegal()
    {
        $userid = lw_get_current_admin_id();
        $org = Db::name('manage_account')->alias('m')
            ->field('po.party_org_name,po.party_org_id,m.maccount_id')
            ->join('hq_party_org po', 'po.party_org_id=m.party_org_id', 'LEFT')
            ->where('m.maccount_id', lw_get_current_admin_id())
            ->find();
        Cache::clear();
        $this->assign('org', $org);
        return $this->fetch();
    }

    /**
     * 功能：非法入境信息保存
     * @time 20170518
     * @author yxf
     */
    public function saveaddillegal()
    {
        if (!input()) {
            return zw_sprint_result('无效的操作，请使用正确途径操作', '', FAIL_CODE);
        }
        $action = Request::instance()->post('action_status');
        $time = Request::instance()->post('seized_time');
        $timestrap = strtotime($time);
        $month = intval(date('m', $timestrap));
        $year = intval(date('Y', $timestrap));
        if ($action == 'insert') {
            $data = [
                'org_id' => Request::instance()->post('party_org_id'),
                'seized_time' => Request::instance()->post('seized_time'),
                'month_id' => $month,
                'theyear' => $year,
                'seized_addr' => Request::instance()->post('seized_addr'),
                'seized_person_num' => Request::instance()->post('seized_person_num'),
                'seized_way_id' => Request::instance()->post('seized_way_id'),
                'marks' => Request::instance()->post('marks'),
                'status' => 1
            ];
            $result = Db::name('bg_illegal_immigration')->insertGetId($data);
        } elseif ($action == 'editor') {
            $updata = [
                'seized_time' => Request::instance()->post('seized_time'),
                'month_id' => $month,
                'theyear' => $year,
                'seized_addr' => Request::instance()->post('seized_addr'),
                'seized_person_num' => Request::instance()->post('seized_person_num'),
                'marks' => Request::instance()->post('marks'),
                'seized_way_id' => Request::instance()->post('seized_way_id')
            ];
            $result = Db::name('bg_illegal_immigration')->where('illegal_id', Request::instance()->post('illegal_id'))->update($updata);
        }
        Cache::clear();
        return $result ? zw_sprint_result('操作成功', zw_build_url('illegal/index')) : zw_sprint_result('操作失败', '', FAIL_CODE);
    }

    /**
     * 功能：获取非法入境信息
     * @time 20170518
     * @author yxf
     */
    public function editillegal()
    {
        if (!input('id')) {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        $result = Db::view('bg_illegal_immigration a', '*')
            ->view('party_org b', 'party_org_name', 'b.party_org_id=a.org_id')
            ->view('bg_illegal_immigration_seized_way c', 'seized_name', 'c.seized_way_id=a.seized_way_id')
            ->where(['a.illegal_id' => input('id')])
            ->find();
        return (is_array($result) && count($result) !== 0) ? zw_sprint_result('获取成功', $result) : zw_sprint_result('获取失败', '', FAIL_CODE);
    }


    /**
     * 非法入境信息搜索
     * */
    public function searchillegal()
    {
        $map['party_org_name|seized_addr|seized_name'] =
            ['like', '%' . Request::instance()->get('search_info').'%'];
        if (zw_get_user_role_prototype()) {
            $result = Db::view('bg_illegal_immigration a', '*')
                ->view('party_org b', 'party_org_name', 'b.party_org_id=a.org_id')
                ->view('bg_illegal_immigration_seized_way c', 'seized_name', 'c.seized_way_id=a.seized_way_id')
                ->where(['a.status' => 1])
                ->where($map)
                ->order('suppress_id', 'desc')
                ->paginate(10, false, [
                    'type' => 'app\admin\driver\ZzwuAjaxPage',
                    'var_page' => 'page',
                    'query' => Request::instance()->param()
                ]);
        } else {
            $maps = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $maps['a.org_id'] = ['in', $party_org_ids];
            }
            $result = Db::view('bg_illegal_immigration a', '*')
                ->view('party_org b', 'party_org_name', 'b.party_org_id=a.org_id')
                ->view('bg_illegal_immigration_seized_way c', 'seized_name', 'c.seized_way_id=a.seized_way_id')
                ->where(['a.status' => 1])
                ->where($map)
                ->where($maps)
                ->order('illegal_id', 'desc')
                //->select(false);
                ->paginate(10, false, [
                    'type' => 'app\admin\driver\ZzwuAjaxPage',
                    'var_page' => 'page',
                    'query' => Request::instance()->param()
                ]);
        }
        $page = $result->render();
        $result = $result->all();
        return zw_sprint_result('获取成功', ['data' => $result, 'page' => $page]);
    }

    /**
     * 缉私非法入境人员管理
     * @time 20170518
     * @author yxf
     **/
    public function illegalperson()
    {
        if (!input('id')) {
            return zw_sprint_result('无法识别的信息条目，请使用正确途径操作', '', FAIL_CODE);
        }
        $ill_id = input('id');
        $person = Db::view('bg_illegal_immigration_persons a', '*')
            ->view('bg_illegal_immigration_entry_place b', 'entry_place_name', 'b.entry_place_id=a.entry_place_id', 'left')
            ->view('bg_illegal_immigration_purpose c', 'purpose_name', 'c.purpose_id=a.purpose_id', 'left')
            ->view('bg_illegal_immigration_sourse d', 'sourse_name', 'd.sourse_id=a.sourse_id', 'left')
            ->view('bg_illegal_immigration_wherego e', 'wherego_name', 'e.wherego_id=a.wherego_id', 'left')
            ->view('bg_process_type f', 'process_type_name', 'f.id=a.process_type_id', 'left')
            ->where(['illegal_id' => $ill_id])
            ->order('person_id', 'desc')
            ->paginate(10);
        $this->assign('person', $person);
        $this->assign('ill_id', $ill_id);
        return $this->fetch();
    }

    /**
     * 功能：删除非法入境人员信息
     * @time 20170518
     * @author yxf
     */
    public function deleteillperson()
    {
        if (!input('post.id')) {
            return zw_sprint_result('无法识别的信息条目，请使用正确途径操作', '', FAIL_CODE);
        }
        $where = ['person_id' => Request::instance()->post('id')];
        $result = Db::name('bg_illegal_immigration_persons')
            ->where($where)
            ->delete();
        return $result ? zw_sprint_result('删除成功', $result) : zw_sprint_result('删除失败, 超级管理员不允许直接删除', '', FAIL_CODE);
    }

    /**
     * 功能：新增非法入境人员信息
     * @time 20170518
     * @author yxf
     */
    public function addillperson()
    {
        if (!input('id')) {
            return zw_sprint_result('无法识别的信息条目，请使用正确途径操作', '', FAIL_CODE);
        }
        $sourse = Db::name('bg_illegal_immigration_sourse')
            ->select();
        $entry_place = Db::name('bg_illegal_immigration_entry_place')
            ->select();
        $purpose = Db::name('bg_illegal_immigration_purpose')
            ->select();
        $wherego = Db::name('bg_illegal_immigration_wherego')
            ->select();
        $slot = Db::name('bg_illegal_immigration_timeslot')
            ->select();
        $process_type = Db::name('bg_process_type')
            ->where('usetables = \'illegal\'')
            ->select();
        $ill_id = input('id');
        $this->assign('sourse', $sourse);
        $this->assign('slot', $slot);
        $this->assign('entry', $entry_place);
        $this->assign('purpose', $purpose);
        $this->assign('wherego', $wherego);
        $this->assign('process', $process_type);
        $this->assign('ill_id', $ill_id);
        return $this->fetch();
    }

    /**
     * 功能：新增非法入境人员信息保存
     * @time 20170518
     * @author yxf
     */
    public function saveaddillperson()
    {
        if (!input()) {
            return zw_sprint_result('无效的操作，请使用正确途径操作', '', FAIL_CODE);
        }
        $illid = Request::instance()->post('illegal_id');
        $age = intval(Request::instance()->post('age'));
        if ($age > 0 && $age < 16) {
            $agegroup = 1;
        } elseif ($age > 15 && $age < 45) {
            $agegroup = 2;
        } elseif ($age > 45) {
            $agegroup = 3;
        } else {
            $agegroup = 4;
        }
        $data = [
            'name' => Request::instance()->post('name'),
            'sex' => Request::instance()->post('sex'),
            'age' => Request::instance()->post('age'),
            'agegroup' => $agegroup,
            'identity' => Request::instance()->post('identity'),
            'sourse_id' => Request::instance()->post('sourse_id'),
            'entry_place_id' => Request::instance()->post('entry_place_id'),
            'time' => Request::instance()->post('time'),
            'timeslot' => Request::instance()->post('timeslot'),
            'purpose_id' => Request::instance()->post('purpose_id'),
            'wherego_id' => Request::instance()->post('wherego_id'),
            'process_type_id' => Request::instance()->post('process_type_id'),
            'remarks' => Request::instance()->post('remarks'),
            'illegal_id' => Request::instance()->post('illegal_id')
        ];
        $result = Db::name('bg_illegal_immigration_persons')->insertGetId($data);
        return $result ? zw_sprint_result('操作成功', zw_build_url('illegal/illegalperson?id=' . $illid)) : zw_sprint_result('操作失败', '', FAIL_CODE);
    }

    /**
     * 功能：获取非法入境人员信息
     * @time 20170518
     * @author yxf
     */
    public function editillperson()
    {
        if (!input('id')) {
            return zw_sprint_result('无法识别的角色名，请使用正确途径操作', '', FAIL_CODE);
        }
        $result = Db::view('bg_illegal_immigration_persons a', '*')
            ->view('bg_illegal_immigration_entry_place b', 'entry_place_name', 'b.entry_place_id=a.entry_place_id', 'left')
            ->view('bg_illegal_immigration_purpose c', 'purpose_name', 'c.purpose_id=a.purpose_id', 'left')
            ->view('bg_illegal_immigration_sourse d', 'sourse_name', 'd.sourse_id=a.sourse_id', 'left')
            ->view('bg_illegal_immigration_wherego e', 'wherego_name', 'e.wherego_id=a.wherego_id', 'left')
            ->view('bg_process_type f', 'process_type_name', 'f.id=a.process_type_id', 'left')
            ->where(['person_id' => input('id')])
            ->find();
        $sourse = Db::name('bg_illegal_immigration_sourse')
            ->select();
        $entry_place = Db::name('bg_illegal_immigration_entry_place')
            ->select();
        $purpose = Db::name('bg_illegal_immigration_purpose')
            ->select();
        $wherego = Db::name('bg_illegal_immigration_wherego')
            ->select();
        $slot = Db::name('bg_illegal_immigration_timeslot')
            ->select();
        $process_type = Db::name('bg_process_type')
            ->where('usetables = \'illegal\'')
            ->select();
        $this->assign('sourse', $sourse);
        $this->assign('slot', $slot);
        $this->assign('entry', $entry_place);
        $this->assign('purpose', $purpose);
        $this->assign('wherego', $wherego);
        $this->assign('process', $process_type);
        $this->assign('person', $result);
        return $this->fetch();
    }

    /**
     * 功能：保存非法入境人员信息
     * @time 20170518
     * @author yxf
     */
    public function saveillperson()
    {
        if (!input('post.person_id')) {
            return zw_sprint_result('无效的操作，请使用正确途径操作', '', FAIL_CODE);
        }
        $illid = Request::instance()->post('illegal_id');
        $age = intval(Request::instance()->post('age'));
        if ($age > 0 && $age < 16) {
            $agegroup = 1;
        } elseif ($age > 15 && $age < 45) {
            $agegroup = 2;
        } elseif ($age > 45) {
            $agegroup = 3;
        } else {
            $agegroup = 4;
        }
        $data = [
            'name' => Request::instance()->post('name'),
            'sex' => Request::instance()->post('sex'),
            'age' => Request::instance()->post('age'),
            'agegroup' => $agegroup,
            'identity' => Request::instance()->post('identity'),
            'sourse_id' => Request::instance()->post('sourse_id'),
            'entry_place_id' => Request::instance()->post('entry_place_id'),
            'time' => Request::instance()->post('time'),
            'timeslot' => Request::instance()->post('timeslot'),
            'purpose_id' => Request::instance()->post('purpose_id'),
            'wherego_id' => Request::instance()->post('wherego_id'),
            'process_type_id' => Request::instance()->post('process_type_id'),
            'remarks' => Request::instance()->post('remarks')
        ];
        $result = Db::name('bg_illegal_immigration_persons')->where('person_id', Request::instance()->post('person_id'))->update($data);
        return $result ? zw_sprint_result('操作成功', zw_build_url('illegal/illegalperson?id=' . $illid)) : zw_sprint_result('操作失败', '', FAIL_CODE);
    }

    /**
     * 缉私非法入境人员信息搜索
     * */
    public function searchillperson()
    {
        $map['name|identity'] =
            ['like', '%' . Request::instance()->get('search_info') . '%'];
        $sup_id = input('id');
        $result = Db::view('bg_illegal_immigration_persons a', '*')
            ->view('bg_illegal_immigration_entry_place b', 'entry_place_name', 'b.entry_place_id=a.entry_place_id', 'left')
            ->view('bg_illegal_immigration_purpose c', 'purpose_name', 'c.purpose_id=a.purpose_id', 'left')
            ->view('bg_illegal_immigration_sourse d', 'sourse_name', 'd.sourse_id=a.sourse_id', 'left')
            ->view('bg_illegal_immigration_wherego e', 'wherego_name', 'e.wherego_id=a.wherego_id', 'left')
            ->view('bg_process_type f', 'process_type_name', 'f.id=a.process_type_id', 'left')
            ->where(['illegal_id' => $sup_id])
            ->where($map)
            ->order('person_id', 'desc')
            ->paginate(10, false, [
                'type' => 'app\admin\driver\ZzwuAjaxPage',
                'var_page' => 'page',
                'query' => Request::instance()->param()
            ]);
        $page = $result->render();
        $result = $result->all();
        return zw_sprint_result('获取成功', ['data' => $result, 'page' => $page]);
    }

    /**
     * 功能：保存非法入境人员信息
     * @time 20170518
     * @author yxf
     */
    public function saveill()
    {
        if (!input('post.person_id')) {
            return zw_sprint_result('无效的操作，请使用正确途径操作', '', FAIL_CODE);
        }
        $illid = Request::instance()->post('illegal_id');
        $data = [
            'name' => Request::instance()->post('name'),
            'sex' => Request::instance()->post('sex'),
            'age' => Request::instance()->post('age'),
            'identity' => Request::instance()->post('identity'),
            'sourse_id' => Request::instance()->post('sourse_id'),
            'entry_place_id' => Request::instance()->post('entry_place_id'),
            'time' => Request::instance()->post('time'),
            'purpose_id' => Request::instance()->post('purpose_id'),
            'wherego_id' => Request::instance()->post('wherego_id'),
            'process_type_id' => Request::instance()->post('process_type_id'),
            'timeslot' => Request::instance()->post('timeslot'),
            'remarks' => Request::instance()->post('remarks')
        ];
        $result = Db::name('bg_illegal_immigration_persons')->where('person_id', Request::instance()->post('person_id'))->update($data);
        return $result ? zw_sprint_result('操作成功', zw_build_url('illegal/illegalperson?id=' . $illid)) : zw_sprint_result('操作失败', '', FAIL_CODE);
    }

    /**
     * 非法入境处理结果统计
     * @time 20170522
     * @author yxf
     * 备用
     **/
    public function procount()
    {
        $pro = Db::name('bg_process_type')
            ->where(['usetables' => 'illegal'])
            ->order('id', 'asc')
            ->select();
        $sql = 'sum(case when illper.illegal_id=ill.illegal_id then 1 else 0 end) as personcount';
        foreach ($pro as $key => $value) {
            $id = $pro[$key]['id'];
            $usefield = $pro[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
        }
        if (zw_get_user_role_prototype()) {
            $res = Db::view('party_org po', 'party_org_id,party_org_name')
                ->field($sql)
                ->join('bg_illegal_immigration ill', 'ill.org_id=po.party_org_id and ill.status = 1', 'LEFT')
                ->join('bg_illegal_immigration_persons illper', 'illper.illegal_id=ill.illegal_id', 'LEFT')
                ->where(['po.level' => 5])
                ->group('po.party_org_id,po.party_org_name')
                ->paginate(10);
        } else {
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['po.party_org_id'] = ['in', $party_org_ids];
            }
            $res = Db::view('party_org po', 'party_org_id,party_org_name')
                ->field($sql)
                ->join('bg_illegal_immigration ill', 'ill.org_id=po.party_org_id and ill.status = 1', 'LEFT')
                ->join('bg_illegal_immigration_persons illper', 'illper.illegal_id=ill.illegal_id', 'LEFT')
                ->where($map)
                ->where(['po.level' => 5])
                ->group('po.party_org_id,po.party_org_name')
                //->select(false);
                //var_dump($res);die;
                ->paginate(10);
        }
        $page = $res->render();
        $result = $res->toArray();
        foreach ($result['data'] as $key => $value) {
            $illcount = Db::view('party_org po', 'party_org_id,party_org_name')
                ->field('sum(case when ill.org_id=po.party_org_id then 1 else 0 end) as illcount')
                ->join('bg_illegal_immigration ill', 'ill.org_id=po.party_org_id and ill.status = 1', 'LEFT')
                ->where(['po.party_org_id' => $result['data'][$key]['party_org_id']])
                ->group('po.party_org_id,po.party_org_name')
                ->select();
            $result['data'][$key]['illcount'] = $illcount[0]['illcount'];
        }
        $this->assign('procount', $result['data']);
        $this->assign('pro', $pro);
        $this->assign('page', $page);
        return $this->fetch();
    }

    /**
     * 非法入境月度统计
     * @time 20170523
     * @author yxf
     **/
    public function monthcount()
    {
        if (input('year')) {
            $time = input('year');
            $year = intval(date("Y", strtotime($time)));
            $month = intval(date("m", strtotime($time)));
        } else {
            $time = date("Y-m");
            $year = intval(date("Y"));
            $month = intval(date("m"));
        }
        $pro = Db::name('bg_process_type')
            ->where(['usetables' => 'illegal'])
            ->order('id', 'asc')
            ->select();
        $sql = '';
        $place = Db::name('bg_illegal_immigration_entry_place')
            ->order('entry_place_id', 'asc')
            ->select();
        $sourse = Db::name('bg_illegal_immigration_sourse')
            ->order('sourse_id', 'asc')
            ->select();
        $purpose = Db::name('bg_illegal_immigration_purpose')
            ->order('purpose_id', 'asc')
            ->select();
        $wherego = Db::name('bg_illegal_immigration_wherego')
            ->order('wherego_id', 'asc')
            ->select();
        $slot = Db::name('bg_illegal_immigration_timeslot')
            ->order('timeslot_id', 'asc')
            ->select();
        foreach ($pro as $key => $value) {
            $id = $pro[$key]['id'];
            $usefield = $pro[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
        }
        foreach ($place as $key => $value) {
            $id = $place[$key]['entry_place_id'];
            $plusefield = $place[$key]['use_field'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when entry_place_id=' . $id . ' then 1 else 0 end) as ' . $plusefield . '';
            }
            $sql = $sql . ',sum(case when entry_place_id=' . $id . ' then 1 else 0 end) as ' . $plusefield . '';
        }
        foreach ($sourse as $key => $value) {
            $id = $sourse[$key]['sourse_id'];
            $sourseusefield = $sourse[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when sourse_id=' . $id . ' then 1 else 0 end) as ' . $sourseusefield . '';
            }
            $sql = $sql . ',sum(case when sourse_id=' . $id . ' then 1 else 0 end) as ' . $sourseusefield . '';
        }
        foreach ($purpose as $key => $value) {
            $id = $purpose[$key]['purpose_id'];
            $puusefield = $purpose[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when purpose_id=' . $id . ' then 1 else 0 end) as ' . $puusefield . '';
            }
            $sql = $sql . ',sum(case when purpose_id=' . $id . ' then 1 else 0 end) as ' . $puusefield . '';
        }
        foreach ($wherego as $key => $value) {
            $id = $wherego[$key]['wherego_id'];
            $wgusefield = $wherego[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when wherego_id=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
            }
            $sql = $sql . ',sum(case when wherego_id=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
        }
        foreach ($slot as $key => $value) {
            $id = $slot[$key]['timeslot_id'];
            $wgusefield = $slot[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when timeslot=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
            }
            $sql = $sql . ',sum(case when timeslot=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
        }
        if (zw_get_user_role_prototype()) {
            $sql = $sql . ',sum(case when sex=1 then 1 else 0 end) as male,sum(case when sex=0 then 1 else 0 end) as female';
            $sql = $sql . ',sum(case when agegroup =1 then 1 else 0 end) as children,sum(case when agegroup =2 then 1 else 0 end) as juvenile,sum(case when agegroup =3 then 1 else 0 end) as old';
            $sql = $sql . ',sum(case when agegroup =4 then 1 else 0 end) as unknownage';
            $res = Db::view('bg_illegal_immigration ill', '*')
                ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
                ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
                ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where('ill.status = 1 and theyear = ' . $year . ' and month_id = ' . $month)
                ->where(['po.level' => 5])
                ->group('ill.illegal_id,po.party_org_name,way.seized_name')
                //->select(false);
                ->paginate(10);
        } else {
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['po.party_org_id'] = ['in', $party_org_ids];
            }
            $sql = $sql . ',sum(case when sex=1 then 1 else 0 end) as male,sum(case when sex=0 then 1 else 0 end) as female';
            $sql = $sql . ',sum(case when agegroup =1 then 1 else 0 end) as children,sum(case when agegroup =2 then 1 else 0 end) as juvenile,sum(case when agegroup =3 then 1 else 0 end) as old';
            $sql = $sql . ',sum(case when agegroup =4 then 1 else 0 end) as unknownage';
            $key = $year.'-'.$month.'-'.'illegal_month_statistics_get_cache';
            if(empty(Cache::get($key))){
                //没有，查数据库等方式获取数据
                $res = Db::view('bg_illegal_immigration ill', '*')
                    ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
                    ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
                    ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
                    ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                    ->where($map)
                    ->where('ill.status = 1 and theyear = ' . $year . ' and month_id = ' . $month)
                    ->where(['po.level' => 5])
                    ->group('ill.illegal_id,po.party_org_name,way.seized_name')
                    //->select(false);
                    ->paginate(10);
                Cache::set($key,$res,3600);
            }
            else{
                $res = Cache::get($key);
            }
//            $res = Db::view('bg_illegal_immigration ill', '*')
//                ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
//                ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
//                ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
//                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
//                ->where($map)
//                ->where('ill.status = 1 and theyear = ' . $year . ' and month_id = ' . $month)
//                ->where(['po.level' => 5])
//                ->group('ill.illegal_id,po.party_org_name,way.seized_name')
//                //->select(false);
//                ->paginate(10);
        }
        $org_id  = zw_get_current_user_party_org_id();
        $org = Db::view('party_org p','*')
            ->view('party_org po','party_org_name parentname','po.party_org_id=p.parent_org_id','left')
            ->where('p.party_org_id',$org_id)
            ->find();
        $this->assign('org', $org);
        $this->assign('procount', $res);
        $this->assign('theyear', $time);
        $this->assign('years', $year);
        $this->assign('months', $month);
        $this->assign('pro', $pro);
        $this->assign('place', $place);
        $this->assign('purpose', $purpose);
        $this->assign('wherego', $wherego);
        $this->assign('sourse', $sourse);
        $this->assign('slot', $slot);
        return $this->fetch();
    }

    /**
     * 非法入境月度统计导出
     * @time 20170602
     * @author yxf
     **/
    public function downmonthcount()
    {
        error_reporting(0);
        import('PHPExcel/PHPExcel', EXTEND_PATH);
        $objPHPExcel = new \PHPExcel();
        $objPHPExcel->getProperties()->setCreator("Maarten Balliauw")
            ->setLastModifiedBy("Maarten Balliauw")
            ->setTitle("Office 2007 XLSX Test Document")
            ->setSubject("Office 2007 XLSX Test Document")
            ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
            ->setKeywords("office 2007 openxml php")
            ->setCategory("Test result file");
        $objPHPExcel->getDefaultStyle()->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER)->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getDefaultStyle()->getAlignment()->setWrapText(true);
        $objPHPExcel->getDefaultStyle()->getFont()->setSize(12);
        $objPHPExcel->getActiveSheet(0)->getDefaultColumnDimension()->setWidth(9);

        if (input('year')) {
            $time = input('year');
            $year = intval(date("Y", strtotime($time)));
            $month = intval(date("m", strtotime($time)));
        } else {
            $year = intval(date("Y"));
            $month = intval(date("m"));
        }
        $pro = Db::name('bg_process_type')
            ->where(['usetables' => 'illegal'])
            ->order('id', 'asc')
            ->select();
        $sql = '';
        $place = Db::name('bg_illegal_immigration_entry_place')
            ->order('entry_place_id', 'asc')
            ->select();
        $sourse = Db::name('bg_illegal_immigration_sourse')
            ->order('sourse_id', 'asc')
            ->select();
        $purpose = Db::name('bg_illegal_immigration_purpose')
            ->order('purpose_id', 'asc')
            ->select();
        $wherego = Db::name('bg_illegal_immigration_wherego')
            ->order('wherego_id', 'asc')
            ->select();
        $slot = Db::name('bg_illegal_immigration_timeslot')
            ->order('timeslot_id', 'asc')
            ->select();
        foreach ($pro as $key => $value) {
            $id = $pro[$key]['id'];
            $usefield = $pro[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
        }
        foreach ($place as $key => $value) {
            $id = $place[$key]['entry_place_id'];
            $plusefield = $place[$key]['use_field'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when entry_place_id=' . $id . ' then 1 else 0 end) as ' . $plusefield . '';
            }
            $sql = $sql . ',sum(case when entry_place_id=' . $id . ' then 1 else 0 end) as ' . $plusefield . '';
        }
        foreach ($sourse as $key => $value) {
            $id = $sourse[$key]['sourse_id'];
            $sourseusefield = $sourse[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when sourse_id=' . $id . ' then 1 else 0 end) as ' . $sourseusefield . '';
            }
            $sql = $sql . ',sum(case when sourse_id=' . $id . ' then 1 else 0 end) as ' . $sourseusefield . '';
        }
        foreach ($purpose as $key => $value) {
            $id = $purpose[$key]['purpose_id'];
            $puusefield = $purpose[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when purpose_id=' . $id . ' then 1 else 0 end) as ' . $puusefield . '';
            }
            $sql = $sql . ',sum(case when purpose_id=' . $id . ' then 1 else 0 end) as ' . $puusefield . '';
        }
        foreach ($wherego as $key => $value) {
            $id = $wherego[$key]['wherego_id'];
            $wgusefield = $wherego[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when wherego_id=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
            }
            $sql = $sql . ',sum(case when wherego_id=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
        }
        foreach ($slot as $key => $value) {
            $id = $slot[$key]['timeslot_id'];
            $wgusefield = $slot[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when timeslot=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
            }
            $sql = $sql . ',sum(case when timeslot=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
        }
        if (zw_get_user_role_prototype()) {
            $sql = $sql . ',sum(case when sex=1 then 1 else 0 end) as male,sum(case when sex=0 then 1 else 0 end) as female';
            $sql = $sql . ',sum(case when agegroup =1 then 1 else 0 end) as children,sum(case when agegroup =2 then 1 else 0 end) as juvenile,sum(case when agegroup =3 then 1 else 0 end) as old';
            $sql = $sql . ',sum(case when agegroup =4 then 1 else 0 end) as unknownage';
            $res = Db::view('bg_illegal_immigration ill', '*')
                ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
                ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
                ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where('ill.status = 1 and theyear = ' . $year . ' and month_id = ' . $month)
                ->where(['po.level' => 5])
                ->group('ill.illegal_id,po.party_org_name,way.seized_name')
                ->select();
        } else {
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['po.party_org_id'] = ['in', $party_org_ids];
            }
            $sql = $sql . ',sum(case when sex=1 then 1 else 0 end) as male,sum(case when sex=0 then 1 else 0 end) as female';
            $sql = $sql . ',sum(case when agegroup =1 then 1 else 0 end) as children,sum(case when agegroup =2 then 1 else 0 end) as juvenile,sum(case when agegroup =3 then 1 else 0 end) as old';
            $sql = $sql . ',sum(case when agegroup =4 then 1 else 0 end) as unknownage';
            $res = Db::view('bg_illegal_immigration ill', '*')
                ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
                ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
                ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where($map)
                ->where('ill.status = 1 and theyear = ' . $year . ' and month_id = ' . $month)
                ->where(['po.level' => 5])
                ->group('ill.illegal_id,po.party_org_name,way.seized_name')
                ->select();
        }
        $sheet=$objPHPExcel->getActiveSheet();
        $sheet->getColumnDimension('M')->setWidth(50);
        $sheet->setTitle("防城港市公安边防支队".$year."年".$month."月查获非法入境人员统计表")
            ->mergeCells('A1:AO1')->setCellValue('A1', "防城港市公安边防支队".$year."年".$month."月查获非法入境人员统计表");
        $sheet->mergeCells('A2:A3')->setCellValue('A2', "序号");
        $sheet->mergeCells('B2:B3')->setCellValue('B2', "查获单位");
        $sheet->mergeCells('C2:C3')->setCellValue('C2', "查获时间");
        $sheet->mergeCells('D2:D3')->setCellValue('D2', "查获地点");
        $sheet->mergeCells('E2:G2')->setCellValue('E2', "查获人数");
        $sheet->mergeCells('H2:L2')->setCellValue('H2', "处理结果");
        $sheet->mergeCells('M2:M3')->setCellValue('M2', "备注");
        $sheet->mergeCells('N2:N3')->setCellValue('N2', "身份");
        $sheet->mergeCells('O2:R2')->setCellValue('O2', "年龄");
        $sheet->mergeCells('S2:V2')->setCellValue('S2', "来源");
        $sheet->mergeCells('W2:AD2')->setCellValue('W2', "入境目的");
        $sheet->mergeCells('AE2:AG2')->setCellValue('AE2', "去向");
        $sheet->mergeCells('AH2:AK2')->setCellValue('AH2', "非法入境地段");
        $sheet->mergeCells('AL2:AO2')->setCellValue('AL2', "非法入境时间");
        $sheet->setCellValue('E3', "总数");
        $sheet->setCellValue('F3', "男");
        $sheet->setCellValue('G3', "女");
        $sheet->setCellValue('H3', "拘留审查");
        $sheet->setCellValue('I3', "便道遣返");
        $sheet->setCellValue('J3', "刑事拘留");
        $sheet->setCellValue('K3', "一线遣返");
        $sheet->setCellValue('L3', "其他");
        $sheet->setCellValue('O3', "16岁以下");
        $sheet->setCellValue('P3', "16岁至45岁");
        $sheet->setCellValue('Q3', "45岁以上");
        $sheet->setCellValue('R3', "不详");
        $sheet->setCellValue('S3', "广宁");
        $sheet->setCellValue('T3', "谅山");
        $sheet->setCellValue('U3', "高平");
        $sheet->setCellValue('V3', "其他");
        $sheet->setCellValue('W3', "务工");
        $sheet->setCellValue('X3', "旅游");
        $sheet->setCellValue('Y3', "探亲");
        $sheet->setCellValue('Z3', "婚嫁");
        $sheet->setCellValue('AA3', "治病");
        $sheet->setCellValue('AB3', "购物赶圩");
        $sheet->setCellValue('AC3', "经商");
        $sheet->setCellValue('AD3', "其他");
        $sheet->setCellValue('AE3', "广东");
        $sheet->setCellValue('AF3', "辖区");
        $sheet->setCellValue('AG3', "其他");
        $sheet->setCellValue('AH3', "辖区便道通道");
        $sheet->setCellValue('AI3', "正规口岸");
        $sheet->setCellValue('AJ3', "其他地区");
        $sheet->setCellValue('AK3', "不详");
        $sheet->setCellValue('AL3', "8时-12时");
        $sheet->setCellValue('AM3', "12时-18时");
        $sheet->setCellValue('AN3', "18时-8时");
        $sheet->setCellValue('AO3', "时间不明");
        $i=4;
        $res = $res ? $res : array();
        foreach ($res as $rows) {
            $sheet->setCellValue('A'.$i,($i-3));
            $sheet->setCellValue('B'.$i, $rows['party_org_name']);
            $sheet->setCellValue('C'.$i, $rows['seized_time']);
            $sheet->setCellValue('D'.$i, $rows['seized_addr']);
            $sheet->setCellValue('E'.$i, $rows['countps']);
            $sheet->setCellValue('F'.$i, $rows['male']);
            $sheet->setCellValue('G'.$i, $rows['female']);
            $sheet->setCellValue('H'.$i, $rows['detention']);
            $sheet->setCellValue('I'.$i, $rows['sidewalk']);
            $sheet->setCellValue('J'.$i, $rows['criminal']);
            $sheet->setCellValue('K'.$i, $rows['frontline']);
            $sheet->setCellValue('L'.$i, $rows['other']);
            $sheet->setCellValue('M'.$i, $rows['marks']);
            $sheet->setCellValue('N'.$i, '');
            $sheet->setCellValue('O'.$i, $rows['children']);
            $sheet->setCellValue('P'.$i, $rows['juvenile']);
            $sheet->setCellValue('Q'.$i, $rows['old']);
            $sheet->setCellValue('R'.$i, $rows['unknownage']);
            $sheet->setCellValue('S'.$i, $rows['guangning']);
            $sheet->setCellValue('T'.$i, $rows['liangshan']);
            $sheet->setCellValue('U'.$i, $rows['gaoping']);
            $sheet->setCellValue('V'.$i, $rows['othersourse']);
            $sheet->setCellValue('W'.$i, $rows['work']);
            $sheet->setCellValue('X'.$i, $rows['tour']);
            $sheet->setCellValue('Y'.$i, $rows['visit_family']);
            $sheet->setCellValue('Z'.$i, $rows['marriage']);
            $sheet->setCellValue('AA'.$i, $rows['cure']);
            $sheet->setCellValue('AB'.$i, $rows['shopping']);
            $sheet->setCellValue('AC'.$i, $rows['business']);
            $sheet->setCellValue('AD'.$i, $rows['otherpurpose']);
            $sheet->setCellValue('AE'.$i, $rows['guangdong']);
            $sheet->setCellValue('AF'.$i, $rows['beat']);
            $sheet->setCellValue('AG'.$i, $rows['othergo']);
            $sheet->setCellValue('AH'.$i, $rows['sidewalkarea']);
            $sheet->setCellValue('AI'.$i, $rows['port']);
            $sheet->setCellValue('AJ'.$i, $rows['otherarea']);
            $sheet->setCellValue('AK'.$i, $rows['unknownarea']);
            $sheet->setCellValue('AL'.$i, $rows['morning']);
            $sheet->setCellValue('AM'.$i, $rows['afternoom']);
            $sheet->setCellValue('AN'.$i, $rows['night']);
            $sheet->setCellValue('AO'.$i, $rows['unknowntime']);
            $i++;
        }

        $fileName = "防城港市公安边防支队".$year."年".$month."月查获非法入境人员统计表.xlsx";
        $writer = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $fileName . '"');
        header('Cache-Control: max-age=0');
        $writer->save('php://output');

    }


    /**
     * 非法入境年度统计
     * @time 20170526
     * @author yxf
     **/
    public function yearcount()
    {
        if (input('year')) {
            $year = intval(input('year'));
        } else {
            $year = intval(date("Y"));
        }
        $pro = Db::name('bg_process_type')
            ->where(['usetables' => 'illegal'])
            ->order('id', 'asc')
            ->select();
        $sql = '';
        $place = Db::name('bg_illegal_immigration_entry_place')
            ->order('entry_place_id', 'asc')
            ->select();
        $sourse = Db::name('bg_illegal_immigration_sourse')
            ->order('sourse_id', 'asc')
            ->select();
        $purpose = Db::name('bg_illegal_immigration_purpose')
            ->order('purpose_id', 'asc')
            ->select();
        $wherego = Db::name('bg_illegal_immigration_wherego')
            ->order('wherego_id', 'asc')
            ->select();
        $slot = Db::name('bg_illegal_immigration_timeslot')
            ->order('timeslot_id', 'asc')
            ->select();
        foreach ($pro as $key => $value) {
            $id = $pro[$key]['id'];
            $usefield = $pro[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
        }
        foreach ($place as $key => $value) {
            $id = $place[$key]['entry_place_id'];
            $plusefield = $place[$key]['use_field'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when entry_place_id=' . $id . ' then 1 else 0 end) as ' . $plusefield . '';
            }
            $sql = $sql . ',sum(case when entry_place_id=' . $id . ' then 1 else 0 end) as ' . $plusefield . '';
        }
        foreach ($sourse as $key => $value) {
            $id = $sourse[$key]['sourse_id'];
            $sourseusefield = $sourse[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when sourse_id=' . $id . ' then 1 else 0 end) as ' . $sourseusefield . '';
            }
            $sql = $sql . ',sum(case when sourse_id=' . $id . ' then 1 else 0 end) as ' . $sourseusefield . '';
        }
        foreach ($purpose as $key => $value) {
            $id = $purpose[$key]['purpose_id'];
            $puusefield = $purpose[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when purpose_id=' . $id . ' then 1 else 0 end) as ' . $puusefield . '';
            }
            $sql = $sql . ',sum(case when purpose_id=' . $id . ' then 1 else 0 end) as ' . $puusefield . '';
        }
        foreach ($wherego as $key => $value) {
            $id = $wherego[$key]['wherego_id'];
            $wgusefield = $wherego[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when wherego_id=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
            }
            $sql = $sql . ',sum(case when wherego_id=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
        }
        foreach ($slot as $key => $value) {
            $id = $slot[$key]['timeslot_id'];
            $wgusefield = $slot[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when timeslot=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
            }
            $sql = $sql . ',sum(case when timeslot=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
        }
        if (zw_get_user_role_prototype()) {
            $sql = $sql . ',sum(case when sex=1 then 1 else 0 end) as male,sum(case when sex=0 then 1 else 0 end) as female';
            $sql = $sql . ',sum(case when agegroup =1 then 1 else 0 end) as children,sum(case when agegroup =2 then 1 else 0 end) as juvenile,sum(case when agegroup =3 then 1 else 0 end) as old';
            $sql = $sql . ',sum(case when agegroup =4 then 1 else 0 end) as unknownage';
            $res = Db::view('bg_illegal_immigration ill', '*')
                ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
                ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
                ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where('ill.status = 1 and theyear = ' . $year)
                ->where(['po.level' => 5])
                ->group('ill.illegal_id,po.party_org_name,way.seized_name')
                //->select(false);
                ->paginate(10);
        } else {
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['po.party_org_id'] = ['in', $party_org_ids];
            }
            $sql = $sql . ',sum(case when sex=1 then 1 else 0 end) as male,sum(case when sex=0 then 1 else 0 end) as female';
            $sql = $sql . ',sum(case when agegroup =1 then 1 else 0 end) as children,sum(case when agegroup =2 then 1 else 0 end) as juvenile,sum(case when agegroup =3 then 1 else 0 end) as old';
            $sql = $sql . ',sum(case when agegroup =4 then 1 else 0 end) as unknownage';
            $key = $year.'-'.'illegal_year_statistics_get_cache';
            if(empty(Cache::get($key))){
                //没有，查数据库等方式获取数据
                $res = Db::view('bg_illegal_immigration ill', '*')
                    ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
                    ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
                    ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
                    ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                    ->where($map)
                    ->where('ill.status = 1 and theyear = ' . $year)
                    ->where(['po.level' => 5])
                    ->group('ill.illegal_id,po.party_org_name,way.seized_name')
                    //->select(false);
                    ->paginate(10);
                Cache::set($key,$res,3600);
            }
            else{
                $res = Cache::get($key);
            }
//            $res = Db::view('bg_illegal_immigration ill', '*')
//                ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
//                ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
//                ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
//                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
//                ->where($map)
//                ->where('ill.status = 1 and theyear = ' . $year)
//                ->where(['po.level' => 5])
//                ->group('ill.illegal_id,po.party_org_name,way.seized_name')
//                //->select(false);
//                ->paginate(10);
        }
        $org_id  = zw_get_current_user_party_org_id();
        $org = Db::view('party_org p','*')
            ->view('party_org po','party_org_name parentname','po.party_org_id=p.parent_org_id','left')
            ->where('p.party_org_id',$org_id)
            ->find();
        $this->assign('org', $org);
        $this->assign('procount', $res);
        $this->assign('theyear', $year);
        $this->assign('pro', $pro);
        $this->assign('place', $place);
        $this->assign('purpose', $purpose);
        $this->assign('wherego', $wherego);
        $this->assign('sourse', $sourse);
        $this->assign('slot', $slot);
        return $this->fetch();
    }

    /**
     * 非法入境年度统计导出
     * @time 20170602
     * @author yxf
     **/
    public function downyearcount()
    {
        error_reporting(0);
        import('PHPExcel/PHPExcel', EXTEND_PATH);
        $objPHPExcel = new \PHPExcel();
        $objPHPExcel->getProperties()->setCreator("Maarten Balliauw")
            ->setLastModifiedBy("Maarten Balliauw")
            ->setTitle("Office 2007 XLSX Test Document")
            ->setSubject("Office 2007 XLSX Test Document")
            ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
            ->setKeywords("office 2007 openxml php")
            ->setCategory("Test result file");
        $objPHPExcel->getDefaultStyle()->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER)->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getDefaultStyle()->getAlignment()->setWrapText(true);
        $objPHPExcel->getDefaultStyle()->getFont()->setSize(12);
        $objPHPExcel->getActiveSheet(0)->getDefaultColumnDimension()->setWidth(9);

        if (input('year')) {
            $year = intval(input('year'));
        } else {
            $year = intval(date("Y"));
        }
        $pro = Db::name('bg_process_type')
            ->where(['usetables' => 'illegal'])
            ->order('id', 'asc')
            ->select();
        $sql = '';
        $place = Db::name('bg_illegal_immigration_entry_place')
            ->order('entry_place_id', 'asc')
            ->select();
        $sourse = Db::name('bg_illegal_immigration_sourse')
            ->order('sourse_id', 'asc')
            ->select();
        $purpose = Db::name('bg_illegal_immigration_purpose')
            ->order('purpose_id', 'asc')
            ->select();
        $wherego = Db::name('bg_illegal_immigration_wherego')
            ->order('wherego_id', 'asc')
            ->select();
        $slot = Db::name('bg_illegal_immigration_timeslot')
            ->order('timeslot_id', 'asc')
            ->select();
        foreach ($pro as $key => $value) {
            $id = $pro[$key]['id'];
            $usefield = $pro[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
        }
        foreach ($place as $key => $value) {
            $id = $place[$key]['entry_place_id'];
            $plusefield = $place[$key]['use_field'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when entry_place_id=' . $id . ' then 1 else 0 end) as ' . $plusefield . '';
            }
            $sql = $sql . ',sum(case when entry_place_id=' . $id . ' then 1 else 0 end) as ' . $plusefield . '';
        }
        foreach ($sourse as $key => $value) {
            $id = $sourse[$key]['sourse_id'];
            $sourseusefield = $sourse[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when sourse_id=' . $id . ' then 1 else 0 end) as ' . $sourseusefield . '';
            }
            $sql = $sql . ',sum(case when sourse_id=' . $id . ' then 1 else 0 end) as ' . $sourseusefield . '';
        }
        foreach ($purpose as $key => $value) {
            $id = $purpose[$key]['purpose_id'];
            $puusefield = $purpose[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when purpose_id=' . $id . ' then 1 else 0 end) as ' . $puusefield . '';
            }
            $sql = $sql . ',sum(case when purpose_id=' . $id . ' then 1 else 0 end) as ' . $puusefield . '';
        }
        foreach ($wherego as $key => $value) {
            $id = $wherego[$key]['wherego_id'];
            $wgusefield = $wherego[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when wherego_id=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
            }
            $sql = $sql . ',sum(case when wherego_id=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
        }
        foreach ($slot as $key => $value) {
            $id = $slot[$key]['timeslot_id'];
            $wgusefield = $slot[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when timeslot=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
            }
            $sql = $sql . ',sum(case when timeslot=' . $id . ' then 1 else 0 end) as ' . $wgusefield . '';
        }
        if (zw_get_user_role_prototype()) {
            $sql = $sql . ',sum(case when sex=1 then 1 else 0 end) as male,sum(case when sex=0 then 1 else 0 end) as female';
            $sql = $sql . ',sum(case when agegroup =1 then 1 else 0 end) as children,sum(case when agegroup =2 then 1 else 0 end) as juvenile,sum(case when agegroup =3 then 1 else 0 end) as old';
            $sql = $sql . ',sum(case when agegroup =4 then 1 else 0 end) as unknownage';
            $res = Db::view('bg_illegal_immigration ill', '*')
                ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
                ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
                ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where('ill.status = 1 and theyear = ' . $year)
                ->where(['po.level' => 5])
                ->group('ill.illegal_id,po.party_org_name,way.seized_name')
                ->select();
        } else {
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['po.party_org_id'] = ['in', $party_org_ids];
            }
            $sql = $sql . ',sum(case when sex=1 then 1 else 0 end) as male,sum(case when sex=0 then 1 else 0 end) as female';
            $sql = $sql . ',sum(case when agegroup =1 then 1 else 0 end) as children,sum(case when agegroup =2 then 1 else 0 end) as juvenile,sum(case when agegroup =3 then 1 else 0 end) as old';
            $sql = $sql . ',sum(case when agegroup =4 then 1 else 0 end) as unknownage';
            $res = Db::view('bg_illegal_immigration ill', '*')
                ->field('way.seized_name,COUNT (ps.person_id) as countps,po.party_org_name,' . $sql . '')
                ->join('party_org po', 'po.party_org_id = ill.org_id', 'LEFT')
                ->join('bg_illegal_immigration_seized_way way', 'way.seized_way_id = ill.seized_way_id', 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where($map)
                ->where('ill.status = 1 and theyear = ' . $year)
                ->where(['po.level' => 5])
                ->group('ill.illegal_id,po.party_org_name,way.seized_name')
                ->select();
        }
        $sheet=$objPHPExcel->getActiveSheet();
        $sheet->getColumnDimension('M')->setWidth(50);
        $sheet->setTitle("防城港市公安边防支队".$year."年查获非法入境人员统计表")
            ->mergeCells('A1:AO1')->setCellValue('A1', "防城港市公安边防支队".$year."年查获非法入境人员统计表");
        $sheet->mergeCells('A2:A3')->setCellValue('A2', "序号");
        $sheet->mergeCells('B2:B3')->setCellValue('B2', "查获单位");
        $sheet->mergeCells('C2:C3')->setCellValue('C2', "查获时间");
        $sheet->mergeCells('D2:D3')->setCellValue('D2', "查获地点");
        $sheet->mergeCells('E2:G2')->setCellValue('E2', "查获人数");
        $sheet->mergeCells('H2:L2')->setCellValue('H2', "处理结果");
        $sheet->mergeCells('M2:M3')->setCellValue('M2', "备注");
        $sheet->mergeCells('N2:N3')->setCellValue('N2', "身份");
        $sheet->mergeCells('O2:R2')->setCellValue('O2', "年龄");
        $sheet->mergeCells('S2:V2')->setCellValue('S2', "来源");
        $sheet->mergeCells('W2:AD2')->setCellValue('W2', "入境目的");
        $sheet->mergeCells('AE2:AG2')->setCellValue('AE2', "去向");
        $sheet->mergeCells('AH2:AK2')->setCellValue('AH2', "非法入境地段");
        $sheet->mergeCells('AL2:AO2')->setCellValue('AL2', "非法入境时间");
        $sheet->setCellValue('E3', "总数");
        $sheet->setCellValue('F3', "男");
        $sheet->setCellValue('G3', "女");
        $sheet->setCellValue('H3', "拘留审查");
        $sheet->setCellValue('I3', "便道遣返");
        $sheet->setCellValue('J3', "刑事拘留");
        $sheet->setCellValue('K3', "一线遣返");
        $sheet->setCellValue('L3', "其他");
        $sheet->setCellValue('O3', "16岁以下");
        $sheet->setCellValue('P3', "16岁至45岁");
        $sheet->setCellValue('Q3', "45岁以上");
        $sheet->setCellValue('R3', "不详");
        $sheet->setCellValue('S3', "广宁");
        $sheet->setCellValue('T3', "谅山");
        $sheet->setCellValue('U3', "高平");
        $sheet->setCellValue('V3', "其他");
        $sheet->setCellValue('W3', "务工");
        $sheet->setCellValue('X3', "旅游");
        $sheet->setCellValue('Y3', "探亲");
        $sheet->setCellValue('Z3', "婚嫁");
        $sheet->setCellValue('AA3', "治病");
        $sheet->setCellValue('AB3', "购物赶圩");
        $sheet->setCellValue('AC3', "经商");
        $sheet->setCellValue('AD3', "其他");
        $sheet->setCellValue('AE3', "广东");
        $sheet->setCellValue('AF3', "辖区");
        $sheet->setCellValue('AG3', "其他");
        $sheet->setCellValue('AH3', "辖区便道通道");
        $sheet->setCellValue('AI3', "正规口岸");
        $sheet->setCellValue('AJ3', "其他地区");
        $sheet->setCellValue('AK3', "不详");
        $sheet->setCellValue('AL3', "8时-12时");
        $sheet->setCellValue('AM3', "12时-18时");
        $sheet->setCellValue('AN3', "18时-8时");
        $sheet->setCellValue('AO3', "时间不明");


        $i=4;
        $res = $res ? $res : array();
        foreach ($res as $rows) {
            $sheet->setCellValue('A'.$i,($i-3));
            $sheet->setCellValue('B'.$i, $rows['party_org_name']);
            $sheet->setCellValue('C'.$i, $rows['seized_time']);
            $sheet->setCellValue('D'.$i, $rows['seized_addr']);
            $sheet->setCellValue('E'.$i, $rows['countps']);
            $sheet->setCellValue('F'.$i, $rows['male']);
            $sheet->setCellValue('G'.$i, $rows['female']);
            $sheet->setCellValue('H'.$i, $rows['detention']);
            $sheet->setCellValue('I'.$i, $rows['sidewalk']);
            $sheet->setCellValue('J'.$i, $rows['criminal']);
            $sheet->setCellValue('K'.$i, $rows['frontline']);
            $sheet->setCellValue('L'.$i, $rows['other']);
            $sheet->setCellValue('M'.$i, $rows['marks']);
            $sheet->setCellValue('N'.$i, '');
            $sheet->setCellValue('O'.$i, $rows['children']);
            $sheet->setCellValue('P'.$i, $rows['juvenile']);
            $sheet->setCellValue('Q'.$i, $rows['old']);
            $sheet->setCellValue('R'.$i, $rows['unknownage']);
            $sheet->setCellValue('S'.$i, $rows['guangning']);
            $sheet->setCellValue('T'.$i, $rows['liangshan']);
            $sheet->setCellValue('U'.$i, $rows['gaoping']);
            $sheet->setCellValue('V'.$i, $rows['othersourse']);
            $sheet->setCellValue('W'.$i, $rows['work']);
            $sheet->setCellValue('X'.$i, $rows['tour']);
            $sheet->setCellValue('Y'.$i, $rows['visit_family']);
            $sheet->setCellValue('Z'.$i, $rows['marriage']);
            $sheet->setCellValue('AA'.$i, $rows['cure']);
            $sheet->setCellValue('AB'.$i, $rows['shopping']);
            $sheet->setCellValue('AC'.$i, $rows['business']);
            $sheet->setCellValue('AD'.$i, $rows['otherpurpose']);
            $sheet->setCellValue('AE'.$i, $rows['guangdong']);
            $sheet->setCellValue('AF'.$i, $rows['beat']);
            $sheet->setCellValue('AG'.$i, $rows['othergo']);
            $sheet->setCellValue('AH'.$i, $rows['sidewalkarea']);
            $sheet->setCellValue('AI'.$i, $rows['port']);
            $sheet->setCellValue('AJ'.$i, $rows['otherarea']);
            $sheet->setCellValue('AK'.$i, $rows['unknownarea']);
            $sheet->setCellValue('AL'.$i, $rows['morning']);
            $sheet->setCellValue('AM'.$i, $rows['afternoom']);
            $sheet->setCellValue('AN'.$i, $rows['night']);
            $sheet->setCellValue('AO'.$i, $rows['unknowntime']);
            $i++;
        }

        $fileName = "防城港市公安边防支队".$year."年查获非法入境人员统计表.xlsx";
        $writer = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $fileName . '"');
        header('Cache-Control: max-age=0');
        $writer->save('php://output');
    }


    /**
     * 非法入境处理结果统计/查获情况
     * @time 20170524
     * @author yxf
     **/
    public function seizedsituation()
    {
        $time = date("Y");
        if (input('year')) {
            $year = intval(input('year'));
        } else {
            $year = intval($time);
        }
        $pro = Db::name('bg_process_type')
            ->where(['usetables' => 'illegal'])
            ->order('id', 'asc')
            ->select();
        $way = Db::name('bg_illegal_immigration_seized_way')
            ->order('seized_way_id', 'asc')
            ->select();
        $sqls = 'SUM(CASE WHEN ill.illegal_id NOTNULL then 1 else 0 end) as allcount';
        $sql = 'SUM(CASE WHEN ps.sex=1 then 1 else 0 end) as male,SUM(CASE WHEN ps.sex=0 then 1 else 0 end) as female';
        foreach ($pro as $key => $value) {
            $id = $pro[$key]['id'];
            $usefield = $pro[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
        }
        $wayusefield = [];
        foreach ($way as $key => $value) {
            $id = $way[$key]['seized_way_id'];
            $usefield = $way[$key]['usefield'];
            $wayusefield[$key * 2]['field'] = $way[$key]['usefield'] . 's';
            $wayusefield[$key * 2 + 1]['field'] = $way[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when ps.illegal_id in (SELECT ill.illegal_id WHERE ill.seized_way_id=' . $id . ') then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when ps.illegal_id in (SELECT ill.illegal_id WHERE ill.seized_way_id=' . $id . ') then 1 else 0 end) as ' . $usefield . '';
        }
        $ways = $way;
        foreach ($ways as $waykey => $value) {
            $ways[$waykey]['usefield'] = $ways[$waykey]['usefield'] . 's';
        }
        if (zw_get_user_role_prototype()) {
            $res = Db::name('month months')
                ->field('months.month_id,months.month_name,' . $sql)
                ->join('bg_illegal_immigration ill', 'ill.month_id=months.month_id and ill.status = 1 and ill.theyear=' . $year, 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->group('months.month_id')
                ->order('months.month_id')
                ->select();
            foreach ($res as $key => $value) {
                $mid = $res[$key]['month_id'];
                foreach ($ways as $waykey => $value) {
                    $wayid = $ways[$waykey]['seized_way_id'];
                    $usefield = $ways[$waykey]['usefield'];
                    if (empty($sql)) {
                        $sqls = $sqls . 'sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $usefield . '';
                    }
                    $sqls = $sqls . ',sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $usefield . '';
                }
                $ress = Db::name('month months')
                    ->field('months.month_id,months.month_name,' . $sqls)
                    ->join('bg_illegal_immigration ill', 'ill.month_id=months.month_id and ill.status = 1 and ill.theyear=' . $year, 'LEFT')
                    ->where('months.month_id=' . $mid)
                    ->group('months.month_id')
                    ->find();
                $res[$key]['allcount'] = $ress['allcount'];
                foreach ($ways as $wayskey => $value) {
                    $field = $ways[$wayskey]['usefield'];
                    $res[$key][$field] = $ress[$field];
                }
            }
        } else {
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['ill.org_id'] = ['in', $party_org_ids];
            }
            $orgids = explode(",", $party_org_ids);
            foreach ($orgids as $orgkey => $value) {
                $orgids[$orgkey] = '\'' . $orgids[$orgkey] . '\'';
            }
            $org_ids = implode(",", $orgids);
            $res = Db::name('month months')
                ->field('months.month_id,months.month_name,' . $sql)
                ->join('bg_illegal_immigration ill', 'ill.month_id=months.month_id and ill.status = 1 and ill.theyear=' . $year . ' and ill.org_id in (' . $org_ids . ')', 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->group('months.month_id')
                ->order('months.month_id')
                ->select();
            foreach ($res as $key => $value) {
                $mid = $res[$key]['month_id'];
                foreach ($ways as $waykey => $value) {
                    $wayid = $ways[$waykey]['seized_way_id'];
                    $use_field = $ways[$waykey]['usefield'];
                    if (empty($sql)) {
                        $sqls = $sqls . 'sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $use_field . '';
                    }
                    $sqls = $sqls . ',sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $use_field . '';
                }
                $ress = Db::name('month months')
                    ->field('months.month_id,months.month_name,' . $sqls)
                    ->join('bg_illegal_immigration ill', 'ill.month_id=months.month_id and ill.status = 1 and ill.theyear=' . $year . ' and ill.org_id in (' . $org_ids . ')', 'LEFT')
                    ->where('months.month_id=' . $mid)
                    ->group('months.month_id')
                    ->find();
                $res[$key]['allcount'] = $ress['allcount'];
                foreach ($ways as $wayskey => $value) {
                    $field = $ways[$wayskey]['usefield'];
                    $res[$key][$field] = $ress[$field];
                }
            }
        }
        $countres=[];
        foreach ($res as $reskey => $value) {
            if(empty($countres)){
                $countres['male'] = $res[$reskey]['male'];
                $countres['female'] = $res[$reskey]['female'];
                $countres['detention'] = $res[$reskey]['detention'];
                $countres['sidewalk'] = $res[$reskey]['sidewalk'];
                $countres['criminal'] = $res[$reskey]['criminal'];
                $countres['frontline'] = $res[$reskey]['frontline'];
                $countres['other'] = $res[$reskey]['other'];
                $countres['patrol'] = $res[$reskey]['patrol'];
                $countres['checkpoints'] = $res[$reskey]['checkpoints'];
                $countres['sidewalkfind'] = $res[$reskey]['sidewalkfind'];
                $countres['report'] = $res[$reskey]['report'];
                $countres['unit'] = $res[$reskey]['unit'];
                $countres['workfind'] = $res[$reskey]['workfind'];
                $countres['clue'] = $res[$reskey]['clue'];
                $countres['allcount'] = $res[$reskey]['allcount'];
                $countres['patrols'] = $res[$reskey]['patrols'];
                $countres['checkpointss'] = $res[$reskey]['checkpointss'];
                $countres['sidewalkfinds'] = $res[$reskey]['sidewalkfinds'];
                $countres['reports'] = $res[$reskey]['reports'];
                $countres['units'] = $res[$reskey]['units'];
                $countres['workfinds'] = $res[$reskey]['workfinds'];
                $countres['clues'] = $res[$reskey]['clues'];
            }else{
                $countres['male'] += $res[$reskey]['male'];
                $countres['female'] += $res[$reskey]['female'];
                $countres['detention'] += $res[$reskey]['detention'];
                $countres['sidewalk'] += $res[$reskey]['sidewalk'];
                $countres['criminal'] += $res[$reskey]['criminal'];
                $countres['frontline'] += $res[$reskey]['frontline'];
                $countres['other'] += $res[$reskey]['other'];
                $countres['patrol'] += $res[$reskey]['patrol'];
                $countres['checkpoints'] += $res[$reskey]['checkpoints'];
                $countres['sidewalkfind'] += $res[$reskey]['sidewalkfind'];
                $countres['report'] += $res[$reskey]['report'];
                $countres['unit'] += $res[$reskey]['unit'];
                $countres['workfind'] += $res[$reskey]['workfind'];
                $countres['clue'] += $res[$reskey]['clue'];
                $countres['allcount'] += $res[$reskey]['allcount'];
                $countres['patrols'] += $res[$reskey]['patrols'];
                $countres['checkpointss'] += $res[$reskey]['checkpointss'];
                $countres['sidewalkfinds'] += $res[$reskey]['sidewalkfinds'];
                $countres['reports'] += $res[$reskey]['reports'];
                $countres['units'] += $res[$reskey]['units'];
                $countres['workfinds'] += $res[$reskey]['workfinds'];
                $countres['clues'] += $res[$reskey]['clues'];
            }
        }
        $org_id  = zw_get_current_user_party_org_id();
        $org = Db::view('party_org p','*')
            ->view('party_org po','party_org_name parentname','po.party_org_id=p.parent_org_id','left')
            ->where('p.party_org_id',$org_id)
            ->find();
        $this->assign('org', $org);
        $this->assign('countres', $countres);
        $this->assign('situation', $res);
        $this->assign('pro', $pro);
        $this->assign('way', $way);
        $this->assign('ways', $ways);
        $this->assign('field', $wayusefield);
        $this->assign('theyear', $year);
        return $this->fetch();
    }

    /**
     * 非法入境处理结果统计导出
     * @time 20170602
     * @author yxf
     **/
    public function downseizedsituation()
    {
        error_reporting(0);
        import('PHPExcel/PHPExcel', EXTEND_PATH);
        $objPHPExcel = new \PHPExcel();
        $objPHPExcel->getProperties()->setCreator("Maarten Balliauw")
            ->setLastModifiedBy("Maarten Balliauw")
            ->setTitle("Office 2007 XLSX Test Document")
            ->setSubject("Office 2007 XLSX Test Document")
            ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
            ->setKeywords("office 2007 openxml php")
            ->setCategory("Test result file");
        $objPHPExcel->getDefaultStyle()->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER)->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getDefaultStyle()->getAlignment()->setWrapText(true);
        $objPHPExcel->getDefaultStyle()->getFont()->setSize(12);
        $objPHPExcel->getActiveSheet(0)->getDefaultColumnDimension()->setWidth(9);
        $time = date("Y");
        if (input('year')) {
            $year = intval(input('year'));
        } else {
            $year = intval($time);
        }
        $pro = Db::name('bg_process_type')
            ->where(['usetables' => 'illegal'])
            ->order('id', 'asc')
            ->select();
        $way = Db::name('bg_illegal_immigration_seized_way')
            ->order('seized_way_id', 'asc')
            ->select();
        $sqls = 'SUM(CASE WHEN ill.illegal_id NOTNULL then 1 else 0 end) as allcount';
        $sql = 'SUM(CASE WHEN ps.sex=1 then 1 else 0 end) as male,SUM(CASE WHEN ps.sex=0 then 1 else 0 end) as female';
        foreach ($pro as $key => $value) {
            $id = $pro[$key]['id'];
            $usefield = $pro[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
        }
        $wayusefield = [];
        foreach ($way as $key => $value) {
            $id = $way[$key]['seized_way_id'];
            $usefield = $way[$key]['usefield'];
            $wayusefield[$key * 2]['field'] = $way[$key]['usefield'] . 's';
            $wayusefield[$key * 2 + 1]['field'] = $way[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when ps.illegal_id in (SELECT ill.illegal_id WHERE ill.seized_way_id=' . $id . ') then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when ps.illegal_id in (SELECT ill.illegal_id WHERE ill.seized_way_id=' . $id . ') then 1 else 0 end) as ' . $usefield . '';
        }
        $ways = $way;
        foreach ($ways as $waykey => $value) {
            $ways[$waykey]['usefield'] = $ways[$waykey]['usefield'] . 's';
        }
        if (zw_get_user_role_prototype()) {
            $res = Db::name('month months')
                ->field('months.month_id,months.month_name,' . $sql)
                ->join('bg_illegal_immigration ill', 'ill.month_id=months.month_id and ill.status = 1 and ill.theyear=' . $year, 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->group('months.month_id')
                ->order('months.month_id')
                ->select();
            foreach ($res as $key => $value) {
                $mid = $res[$key]['month_id'];
                foreach ($ways as $waykey => $value) {
                    $wayid = $ways[$waykey]['seized_way_id'];
                    $usefield = $ways[$waykey]['usefield'];
                    if (empty($sql)) {
                        $sqls = $sqls . 'sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $usefield . '';
                    }
                    $sqls = $sqls . ',sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $usefield . '';
                }
                $ress = Db::name('month months')
                    ->field('months.month_id,months.month_name,' . $sqls)
                    ->join('bg_illegal_immigration ill', 'ill.month_id=months.month_id and ill.status = 1 and ill.theyear=' . $year, 'LEFT')
                    ->where('months.month_id=' . $mid)
                    ->group('months.month_id')
                    ->find();
                $res[$key]['allcount'] = $ress['allcount'];
                foreach ($ways as $wayskey => $value) {
                    $field = $ways[$wayskey]['usefield'];
                    $res[$key][$field] = $ress[$field];
                }
            }
        } else {
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['ill.org_id'] = ['in', $party_org_ids];
            }
            $orgids = explode(",", $party_org_ids);
            foreach ($orgids as $orgkey => $value) {
                $orgids[$orgkey] = '\'' . $orgids[$orgkey] . '\'';
            }
            $org_ids = implode(",", $orgids);
            $res = Db::name('month months')
                ->field('months.month_id,months.month_name,' . $sql)
                ->join('bg_illegal_immigration ill', 'ill.month_id=months.month_id and ill.status = 1 and ill.theyear=' . $year . ' and ill.org_id in (' . $org_ids . ')', 'LEFT')
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->group('months.month_id')
                ->order('months.month_id')
                ->select();
            foreach ($res as $key => $value) {
                $mid = $res[$key]['month_id'];
                foreach ($ways as $waykey => $value) {
                    $wayid = $ways[$waykey]['seized_way_id'];
                    $use_field = $ways[$waykey]['usefield'];
                    if (empty($sql)) {
                        $sqls = $sqls . 'sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $use_field . '';
                    }
                    $sqls = $sqls . ',sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $use_field . '';
                }
                $ress = Db::name('month months')
                    ->field('months.month_id,months.month_name,' . $sqls)
                    ->join('bg_illegal_immigration ill', 'ill.month_id=months.month_id and ill.status = 1 and ill.theyear=' . $year . ' and ill.org_id in (' . $org_ids . ')', 'LEFT')
                    ->where('months.month_id=' . $mid)
                    ->group('months.month_id')
                    ->find();
                $res[$key]['allcount'] = $ress['allcount'];
                foreach ($ways as $wayskey => $value) {
                    $field = $ways[$wayskey]['usefield'];
                    $res[$key][$field] = $ress[$field];
                }
            }
        }
        $sheet=$objPHPExcel->getActiveSheet();
        $sheet->setTitle($year."年查获非法入境人员简要情况")
        ->mergeCells('A1:W1')->setCellValue('A1', $year."年查获非法入境人员简要情况");
        $sheet->mergeCells('A2:A3')->setCellValue('A2', "月份");
        $sheet->mergeCells('B2:B3')->setCellValue('B2', "批数");
        $sheet->mergeCells('C2:D2')->setCellValue('C2', "人数");
        $sheet->mergeCells('E2:I2')->setCellValue('E2', "处理情况");
        $sheet->mergeCells('J2:K2')->setCellValue('J2', "巡逻发现");
        $sheet->mergeCells('L2:M2')->setCellValue('L2', "检查岗查获");
        $sheet->mergeCells('N2:O2')->setCellValue('N2', "路长举报");
        $sheet->mergeCells('P2:Q2')->setCellValue('P2', "两翼便道查获");
        $sheet->mergeCells('R2:S2')->setCellValue('R2', "外单位移交");
        $sheet->mergeCells('T2:U2')->setCellValue('T2', "工作中发现");
        $sheet->mergeCells('V2:W2')->setCellValue('V2', "获取线索");
        $sheet->setCellValue('C3', "男");
        $sheet->setCellValue('D3', "女");
        $sheet->setCellValue('E3', "拘留审查");
        $sheet->setCellValue('F3', "便道遣返");
        $sheet->setCellValue('G3', "刑事拘留");
        $sheet->setCellValue('H3', "一线遣返");
        $sheet->setCellValue('I3', "其他");
        $sheet->setCellValue('J3', "批");
        $sheet->setCellValue('K3', "人数");
        $sheet->setCellValue('L3', "批");
        $sheet->setCellValue('M3', "人数");
        $sheet->setCellValue('N3', "批");
        $sheet->setCellValue('O3', "人数");
        $sheet->setCellValue('P3', "批");
        $sheet->setCellValue('Q3', "人数");
        $sheet->setCellValue('R3', "批");
        $sheet->setCellValue('S3', "人数");
        $sheet->setCellValue('T3', "批");
        $sheet->setCellValue('U3', "人数");
        $sheet->setCellValue('V3', "批");
        $sheet->setCellValue('W3', "人数");

        $i=4;
        $res = $res ? $res : array();
        foreach ($res as $rows) {
            $sheet->setCellValue('A'.$i, $rows['month_name']);
            $sheet->setCellValue('B'.$i, $rows['allcount']);
            $sheet->setCellValue('C'.$i, $rows['male']);
            $sheet->setCellValue('D'.$i, $rows['female']);
            $sheet->setCellValue('E'.$i, $rows['detention']);
            $sheet->setCellValue('F'.$i, $rows['sidewalk']);
            $sheet->setCellValue('G'.$i, $rows['criminal']);
            $sheet->setCellValue('H'.$i, $rows['frontline']);
            $sheet->setCellValue('I'.$i, $rows['other']);
            $sheet->setCellValue('J'.$i, $rows['patrols']);
            $sheet->setCellValue('K'.$i, $rows['patrol']);
            $sheet->setCellValue('L'.$i, $rows['checkpointss']);
            $sheet->setCellValue('M'.$i, $rows['checkpoints']);
            $sheet->setCellValue('N'.$i, $rows['sidewalkfinds']);
            $sheet->setCellValue('O'.$i, $rows['sidewalkfind']);
            $sheet->setCellValue('P'.$i, $rows['reports']);
            $sheet->setCellValue('Q'.$i, $rows['report']);
            $sheet->setCellValue('R'.$i, $rows['units']);
            $sheet->setCellValue('S'.$i, $rows['unit']);
            $sheet->setCellValue('T'.$i, $rows['workfinds']);
            $sheet->setCellValue('U'.$i, $rows['workfind']);
            $sheet->setCellValue('V'.$i, $rows['clues']);
            $sheet->setCellValue('W'.$i, $rows['clue']);
            $i++;
        }
        $sheet->setCellValue('A'.$i, '合计');
        $sheet->setCellValue('B'.$i, '=SUM(B2:B'.($i-1).')');
        $sheet->setCellValue('C'.$i, '=SUM(C2:C'.($i-1).')');
        $sheet->setCellValue('D'.$i, '=SUM(D2:D'.($i-1).')');
        $sheet->setCellValue('E'.$i, '=SUM(E2:E'.($i-1).')');
        $sheet->setCellValue('F'.$i, '=SUM(F2:F'.($i-1).')');
        $sheet->setCellValue('G'.$i, '=SUM(G2:G'.($i-1).')');
        $sheet->setCellValue('H'.$i, '=SUM(H2:H'.($i-1).')');
        $sheet->setCellValue('I'.$i, '=SUM(I2:I'.($i-1).')');
        $sheet->setCellValue('J'.$i, '=SUM(J2:J'.($i-1).')');
        $sheet->setCellValue('K'.$i, '=SUM(K2:K'.($i-1).')');
        $sheet->setCellValue('L'.$i, '=SUM(L2:L'.($i-1).')');
        $sheet->setCellValue('M'.$i, '=SUM(M2:M'.($i-1).')');
        $sheet->setCellValue('N'.$i, '=SUM(N2:N'.($i-1).')');
        $sheet->setCellValue('O'.$i, '=SUM(O2:O'.($i-1).')');
        $sheet->setCellValue('P'.$i, '=SUM(P2:P'.($i-1).')');
        $sheet->setCellValue('Q'.$i, '=SUM(Q2:Q'.($i-1).')');
        $sheet->setCellValue('R'.$i, '=SUM(R2:R'.($i-1).')');
        $sheet->setCellValue('S'.$i, '=SUM(S2:S'.($i-1).')');
        $sheet->setCellValue('T'.$i, '=SUM(T2:T'.($i-1).')');
        $sheet->setCellValue('U'.$i, '=SUM(U2:U'.($i-1).')');
        $sheet->setCellValue('V'.$i, '=SUM(V2:V'.($i-1).')');
        $sheet->setCellValue('W'.$i, '=SUM(W2:W'.($i-1).')');
        $fileName = $year."年查获非法入境人员简要情况.xlsx";
        $writer = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $fileName . '"');
        header('Cache-Control: max-age=0');
        $writer->save('php://output');
    }


    /**
     * 非法入境处理结果统计/
     * @time 20170526
     * @author yxf
     **/
    public function processcount()
    {
        $time = date("Y");
        if (input('year')) {
            $year = intval(input('year'));
        } else {
            $year = intval($time);
        }
        $level = Db::view('party_org', 'level')
            ->view('manage_account', 'maccount_id', 'manage_account.party_org_id=party_org.party_org_id')
            ->where(['maccount_id' => lw_get_current_admin_id()])
            ->find();
        $orglevel = $level['level'];
        $pro = Db::name('bg_process_type')
            ->where(['usetables' => 'illegal'])
            ->order('id', 'asc')
            ->select();
        $sql = 'sum(case when ps.illegal_id=ill.illegal_id then 1 else 0 end) as personcount';
        foreach ($pro as $key => $value) {
            $id = $pro[$key]['id'];
            $usefield = $pro[$key]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when process_type_id=' . $id . ' then 1 else 0 end) as ' . $usefield . '';
        }
        if (zw_get_user_role_prototype()) {
            $res = Db::view('party_org po', 'party_org_id,party_org_name')
                ->where('po.level=4')
                ->paginate(10);
            $page = $res->render();
            $res = $res->toArray();
            foreach ($res['data'] as $key => $value) {
                $org_result = Db::view('party_org', '*')
                    ->where(['party_org_id' => $res['data'][$key]['party_org_id']])
                    ->find();
                $result = zw_get_org_subordinate($org_result);
                $orgresult = [];
                foreach ($result as $orgkey => $value) {
                    $orgresult[$orgkey] = '\'' . $result[$orgkey]['party_org_id'] . '\'';
                }
                $orgid = implode(",", $orgresult);
                $data = Db::name('bg_illegal_immigration ill')
                    ->field($sql)
                    ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                    ->where('ill.status=1 and ill.theyear = ' . $year . ' and ill.org_id in (' . $orgid . ')')
                    ->select();
                $ills = Db::name('bg_illegal_immigration ill')
                    ->field('sum(case when ill.org_id in (' . $orgid . ') then 1 else 0 end) as illcount')
                    ->where('ill.status=1 and theyear = ' . $year . '')
                    ->select();
                $res['data'][$key]['illcount'] = $ills[0]['illcount'];
                $res['data'][$key]['personcount'] = $data[0]['personcount'];
                foreach ($pro as $prokey => $value) {
                    $prousefield = $pro[$prokey]['usefield'];
                    $res['data'][$key][$prousefield] = $data[0][$prousefield];
                }
            }
        } else {
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['po.party_org_id'] = ['in', $party_org_ids];
            }
            if ($orglevel == 5) {
                $res = Db::view('party_org po', 'party_org_id,party_org_name')
                    ->field($sql)
                    ->join('bg_illegal_immigration ill', 'ill.org_id=po.party_org_id and ill.status = 1 and theyear = ' . $year . '', 'LEFT')
                    ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                    ->where($map)
                    ->where(['po.level' => 5])
                    ->group('po.party_org_id,po.party_org_name')
                    //->select(false);
                    //var_dump($res);die;
                    ->paginate(10);
                $page = $res->render();
                $res = $res->toArray();
                foreach ($res['data'] as $key => $value) {
                    $illcount = Db::view('party_org po', 'party_org_id,party_org_name')
                        ->field('sum(case when ill.org_id=po.party_org_id then 1 else 0 end) as illcount')
                        ->join('bg_illegal_immigration ill', 'ill.org_id=po.party_org_id and ill.status = 1 and theyear = ' . $year . '', 'LEFT')
                        ->where(['po.party_org_id' => $res['data'][$key]['party_org_id']])
                        ->group('po.party_org_id,po.party_org_name')
                        ->select();
                    $res['data'][$key]['illcount'] = $illcount[0]['illcount'];
                }
            } else {
                $res = Db::view('party_org po', 'party_org_id,party_org_name')
                    ->where($map)
                    ->where('po.level=4')
                    ->paginate(10);
                $page = $res->render();
                $res = $res->toArray();
                foreach ($res['data'] as $key => $value) {
                    $org_result = Db::view('party_org', '*')
                        ->where(['party_org_id' => $res['data'][$key]['party_org_id']])
                        ->find();
                    $result = zw_get_org_subordinate($org_result);
                    $orgresult = [];
                    foreach ($result as $orgkey => $value) {
                        $orgresult[$orgkey] = '\'' . $result[$orgkey]['party_org_id'] . '\'';
                    }
                    $orgid = implode(",", $orgresult);
                    $data = Db::name('bg_illegal_immigration ill')
                        ->field($sql)
                        ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                        ->where('ill.status=1 and ill.theyear = ' . $year . ' and ill.org_id in (' . $orgid . ')')
                        ->select();
                    $ills = Db::name('bg_illegal_immigration ill')
                        ->field('sum(case when ill.org_id in (' . $orgid . ') then 1 else 0 end) as illcount')
                        ->where('ill.status=1 and theyear = ' . $year . '')
                        ->select();
                   // $res['data'][$key]['illcount'] = $ills[0]['illcount'];
                    //$res['data'][$key]['personcount'] = $data[0]['personcount'];
                    $res['data'][$key]['illcount'] = (null === $ills[0]['illcount']) ? 0 : $ills[0]['illcount'];
                    $res['data'][$key]['personcount'] = (null === $data[0]['personcount']) ? 0 : $data[0]['personcount'];
                    foreach ($pro as $prokey => $value) {
                        $prousefield = $pro[$prokey]['usefield'];
                        //$res['data'][$key][$prousefield] = $data[0][$prousefield];
                        $res['data'][$key][$prousefield] = (null === $data[0][$prousefield]) ? 0 : $data[0][$prousefield];
                    }
                }
            }
        }
        $this->assign('procount', $res['data']);
        $this->assign('pro', $pro);
        $this->assign('theyear', $year);
        $this->assign('page', $page);
        return $this->fetch();
    }

    /**
     * 图形统计首页
     * @time 20170526
     * @author yxf
     **/
    public function chartsindex()
    {
        $time = date("Y");
        if (input('year')) {
            $year = intval(input('year'));
        } else {
            $year = intval($time);
        }
        $way = Db::name('bg_illegal_immigration_seized_way')
            ->order('seized_way_id', 'asc')
            ->select();
        $sql = '';
        foreach ($way as $waykey => $value) {
            $wayid = $way[$waykey]['seized_way_id'];
            $usefield = $way[$waykey]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $usefield . '';
        }
        if (zw_get_user_role_prototype()) {
            $res = Db::name('bg_illegal_immigration ill')
                ->field($sql)
                ->where('ill.status=1 and theyear = ' . $year . '')
                ->find();
        }else{
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['ill.org_id'] = ['in', $party_org_ids];
            }
            $res = Db::name('bg_illegal_immigration ill')
                ->field($sql)
                ->where($map)
                ->where('ill.status=1 and theyear = ' . $year . '')
                ->find();
            if(empty($res)){

            }
        }
        $this->assign('respie', $res);
        return $this->fetch();
    }


    /**
     * 饼图统计
     * @time 20170531
     * @author yxf
     **/
    public function chartspie()
    {
        $time = date("Y");
        if (input('year')) {
            $year = intval(input('year'));
        } else {
            $year = intval($time);
        }
        $way = Db::name('bg_illegal_immigration_seized_way')
            ->order('seized_way_id', 'asc')
            ->select();
        $sql = '';
        foreach ($way as $waykey => $value) {
            $wayid = $way[$waykey]['seized_way_id'];
            $usefield = $way[$waykey]['usefield'];
            if (empty($sql)) {
                $sql = $sql . 'sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $usefield . '';
            }
            $sql = $sql . ',sum(case when seized_way_id=' . $wayid . ' then 1 else 0 end) as ' . $usefield . '';
        }
        $month = Db::name('month')
            ->order('month_id', 'asc')
            ->select();
        $sqls = '';
        foreach ($month as $monthkey => $value) {
            $monthid = $month[$monthkey]['month_id'];
            $monthusefield = $month[$monthkey]['usefield'];
            if (empty($sqls)) {
                $sqls = $sqls . 'sum(case when month_id=' . $monthid . ' and ps.illegal_id NOTNULL then 1 else 0 end) as ' . $monthusefield . '';
            }
            $sqls = $sqls . ',sum(case when month_id=' . $monthid . ' and ps.illegal_id NOTNULL then 1 else 0 end) as ' . $monthusefield . '';
        }
        if (zw_get_user_role_prototype()) {
            $res = Db::name('bg_illegal_immigration ill')
                ->field($sql)
                ->where('ill.status=1 and theyear = ' . $year . '')
                ->find();
            $ress = Db::name('bg_illegal_immigration ill')
                ->field($sqls)
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where('ill.status=1 and theyear = ' . $year . '')
                ->find();
        }else{
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['ill.org_id'] = ['in', $party_org_ids];
            }
            $res = Db::name('bg_illegal_immigration ill')
                ->field($sql)
                ->where($map)
                ->where('ill.status=1 and theyear = ' . $year . '')
                ->find();
            $ress = Db::name('bg_illegal_immigration ill')
                ->field($sqls)
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where('ill.status=1 and ill.theyear = ' . $year . '')
                ->where($map)
                ->find();
        }
        $this->assign('theyear', $year);
        $this->assign('respie', $res);
        $this->assign('rescolumn', $ress);
        return $this->fetch();

    }
    /**
     * 柱状图统计
     * @time 20170601
     * @author yxf
     **/
    public function chartsbar()
    {
        $time = date("Y");
        if (input('year')) {
            $year = intval(input('year'));
        } else {
            $year = intval($time);
        }
        $month = Db::name('month')
            ->order('month_id', 'asc')
            ->select();
        $sqls = '';
        foreach ($month as $monthkey => $value) {
            $monthid = $month[$monthkey]['month_id'];
            $monthusefield = $month[$monthkey]['usefield'];
            if (empty($sqls)) {
                $sqls = $sqls . 'sum(case when month_id=' . $monthid . ' and ps.illegal_id NOTNULL then 1 else 0 end) as ' . $monthusefield . '';
            }
            $sqls = $sqls . ',sum(case when month_id=' . $monthid . ' and ps.illegal_id NOTNULL then 1 else 0 end) as ' . $monthusefield . '';
        }

        if (zw_get_user_role_prototype()) {
            $ress = Db::name('bg_illegal_immigration ill')
                ->field($sqls)
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where('ill.status=1 and theyear = ' . $year . '')
                ->find();
        }else{
            $map = [];
            $party_org_ids = zw_get_current_user_party_org_id();
            if ($party_org_ids) {
                $sub_party_orgs = zw_get_content_org_subordinate();
                if ($sub_party_orgs) {
                    $party_org_ids .= ',' . implode(',', array_column($sub_party_orgs, 'party_org_id'));
                }
                $map['ill.org_id'] = ['in', $party_org_ids];
            }
            $ress = Db::name('bg_illegal_immigration ill')
                ->field($sqls)
                ->join('bg_illegal_immigration_persons ps', 'ps.illegal_id=ill.illegal_id', 'LEFT')
                ->where('ill.status=1 and ill.theyear = ' . $year . '')
                ->where($map)
                ->find();
        }
        $this->assign('resbar', $ress);
        return $this->fetch();

    }
}



