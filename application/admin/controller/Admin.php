<?php
/**
 * Created by PhpStorm.
 * User: nlw
 * Date: 17-4-7
 * Time: 上午10:51
 */
namespace app\admin\controller;

use think\Request;
use think\Db;

class Admin extends Adminbase
{

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if (!zw_get_user_role_prototype())
        {
            $this->error('对不起，您没有此操作权限，不允许进行此操作');
        }
    }

    /**
     *
     * 管理员列表
     *
     * @author  nlw
     * @date  20170407
     */
    public function index()
    {
        $admin_list = Db::view('manage_account','*')
            ->view('sys_user_role','sys_role_id','sys_user_role.maccount_id = manage_account.maccount_id', 'left')
            ->view('sys_role','*','sys_role.sys_role_id = sys_user_role.sys_role_id', 'left')
            ->view('party_org','party_org_name,party_org_id','party_org.party_org_id= manage_account.party_org_id', 'left')
            ->order('manage_account.sort_num', 'desc')
            ->paginate(15);
        $role_list = Db::name('sys_role')->select();
        $org_list = Db::name('party_org')->where('parent_org_id', 'NEQ', '-1')->order('party_org_number')->select();
        $org_result = [];
        if (is_array($org_list) && count($org_list) !== 0)
        {
            foreach($org_list as $key=>$row)
            {
                // 默认展开两级 Mao 20170427
                $is_open = ($row['level'] > 2) ? false : true;
                // 判断是否有子节点
                $is_parent = ($row['rgt'] == $row['lft'] + 1) ? false : true;
                $org_result[] = [
                    'id'        => $row['party_org_id'],
                    'pId'       => $row['parent_org_id'],
                    'name'      => $row['party_org_name'],
                    'open'      => $is_open,
                    'isParent'  => $is_parent
                ];
            }
        }
        $this->assign('role_list',$role_list);
        $this->assign('org_list',json_encode($org_result));

        $this->assign('admin_list',$admin_list);
        return $this->fetch();
    }

    /**
     *
     * 管理员添加保存
     *
     * @author  nlw
     * @date  20170407
     */
    public function save()
    {

        if (!input('post.maccount_name'))
        {
            return zw_sprint_result('请输入用户名字', '', FAIL_CODE);
        }
        $admin_data = [
            'maccount_name'         => Request::instance()->post('maccount_name'),
            'mreal_name'            => Request::instance()->post('mreal_name'),
            'is_use'                => Request::instance()->post('is_use'),
            'party_org_id'          => Request::instance()->post('party_org'),
            'mobile_number'          => Request::instance()->post('mobile_number'),
            'sort_num'                => Request::instance()->post('sort_num'),
        ];
        if ('insert' === Request::instance()->post('action_status'))
        {
            if(!preg_match("/^((?=.*[0-9].*)(?=.*[A-Za-z].*))[0-9A-Za-z]{8,20}$/",input('post.mpassword'),$password)){
                return zw_sprint_result('密码至少8位，且必须是字母和数字的组合！', '', FAIL_CODE);
            }
            $maccount_name = Db::name('manage_account')->where(['maccount_name'=> Request::instance()->post('maccount_name')])->count('maccount_name');
            if ($maccount_name)
            {
                return zw_sprint_result('操作失败,系统不允许创建相同帐号名管理员', '', FAIL_CODE);
            }

            $admin_data['mpassword'] = zw_set_password(Request::instance()->post('mpassword'));
            $admin_data['create_account_name'] = zw_get_admin_user_name();
            $admin_data['create_time'] = date('Y-m-d H:i:s', time());
            $admin_data['mpassword_change_time'] = date('Y-m-d H:i:s', time());

            $ma_id = Db::name('manage_account')->insertGetId($admin_data);
            if ($ma_id)
            {
                Db::name('sys_user_role')
                    ->insertGetId([
                        'maccount_id' => $ma_id,
                        'sys_role_id' => Request::instance()->post('role')
                    ]);
            }
            return $ma_id ? zw_sprint_result('操作成功') : zw_sprint_result('操作失败', '', FAIL_CODE);
        }else{
            //判断有无修改密码
            if (strlen(Request::instance()->post('mpassword')) !== 0)
            {
                if(!preg_match("/^((?=.*[0-9].*)(?=.*[A-Za-z].*))[0-9A-Za-z]{8,20}$/",input('post.mpassword'),$password)){
                    return zw_sprint_result('密码至少8位，且必须是字母和数字的组合！', '', FAIL_CODE);
                }
                $manage_data = Db::name('manage_account')->where('maccount_id',Request::instance()->post('maccount_id'))->find();
                if(zw_compare_password(Request::instance()->post('mpassword'),$manage_data['mpassword'])){
                    return zw_sprint_result('新密码不能与原密码相同！', '', FAIL_CODE);
                }
                $admin_data['mpassword'] = zw_set_password(Request::instance()->post('mpassword'));
                $admin_data['mpassword_change_time'] = date('Y-m-d H:i:s', time());
            }
            $result = Db::name('manage_account')
                ->where(['maccount_id' => Request::instance()->post('maccount_id')])
                ->update($admin_data);
            //修改用户关系表
            $id = Db::view('sys_user_role', 'id')->where(['maccount_id' => Request::instance()->post('maccount_id')])->select();
            if (is_array($id) && count($id) != 0)
            {
                $maccount_id = Request::instance()->post('maccount_id');
                if ($maccount_id != lw_get_current_admin_id())
                {
                    Db::name('sys_user_role')
                        ->where(['maccount_id' => $maccount_id])
                        ->update(['sys_role_id' => Request::instance()->post('role')]);
                }
            }else
            {
                Db::name('sys_user_role')
                    ->insertGetId([
                        'maccount_id' => Request::instance()->post('maccount_id'),
                        'sys_role_id' => Request::instance()->post('role')
                    ]);
            }
            return $result ? zw_sprint_result('更新成功') : zw_sprint_result('更新失败', '', FAIL_CODE);
        }
    }
    /**
     *
     * 管理员列表编辑
     *
     * @author  nlw
     * @date  20170407
     */
    public function edit()
    {
        if (!input('post.id'))
        {
            return zw_sprint_result('无法获取用户信息，请选择修改用户', '', FAIL_CODE);
        }
        $result = Db::view('manage_account','maccount_name,mreal_name,is_use,sort_num,maccount_id,mobile_number,party_org_id')
            ->view('sys_user_role','sys_role_id','sys_user_role.maccount_id = manage_account.maccount_id', 'left')
            ->view('sys_role','*','sys_role.sys_role_id = sys_user_role.sys_role_id', 'left')
            ->where(['manage_account.maccount_id' => Request::instance()->post('id')])
            ->find();//org_num
        if ((is_array($result) && count($result) !== 0 ))
        {
            $result['org_name'] = zw_get_org_name($result['party_org_id']);
        }
        return (is_array($result) && count($result) !== 0 ) ? zw_sprint_result('获取成功', $result) : zw_sprint_result('获取失败', '', FAIL_CODE);
    }

    /**
     *
     * 管理员列表编辑(新页面)
     *
     * @author  nlw
     * @date  20170407
     */
    public function adminEdit20170418()
    {
        if (!input('id'))
        {
            return zw_sprint_result('无法获取用户信息，请选择修改用户', '', FAIL_CODE);
        }
        $result = Db::view('manage_account','*')
            ->view('sys_user_role','sys_role_id','sys_user_role.maccount_id = manage_account.maccount_id')
            ->view('sys_role','*','sys_role.sys_role_id = sys_user_role.sys_role_id')
            ->where(['manage_account.maccount_id' => input('id')])
            ->find();
        $role_list = Db::name('sys_role')->select();
        $this->assign('role_list',$role_list);
        $this->assign('admin_list',$result);
        return $this->fetch();
//        return (is_array($result) && count($result) !== 0 ) ? zw_sprint_result('获取成功', $result) : zw_sprint_result('获取失败', '', FAIL_CODE);
    }

    /**
     *
     * 管理员列表编辑(新页面)
     *
     * @author  nlw
     * @date  20170415
     */
    public function editSave20170418()
    {
        if (!input('post.maccount_name'))
        {
            return zw_sprint_result('无法获取用户信息，请选择修改用户', '', FAIL_CODE);
        }
        $admin_data = [
            'maccount_name'         => Request::instance()->post('maccount_name'),
            'mreal_name'            => Request::instance()->post('mreal_name'),
            'is_use'                => Request::instance()->post('is_use'),
            'mobile_number'         => Request::instance()->post('mobile_number'),
        ];
        //如果修改了密码
        if (strlen(Request::instance()->post('mpassword')) !== 0)
        {
            $admin_data['mpassword'] = zw_set_password(Request::instance()->post('mpassword'));
        }
        $result = Db::name('manage_account')
            ->where(['maccount_id' => Request::instance()->post('maccount_id')])
            ->update($admin_data);
        //更新用户角色关系表
        Db::name('sys_user_role')
            ->where(['maccount_id' => Request::instance()->post('maccount_id')])
            ->setField(['sys_role_id' => Request::instance()->post('role_id')]);
        return $result ? zw_sprint_result('更新成功') : zw_sprint_result('更新失败', '', FAIL_CODE);
    }
    /**
     *
     * 管理员账户状态管理
     *
     * @author  nlw
     * @date  20170407
     */
    public function isUse()
    {
        if (!input('post.maccount_id'))
        {
            return zw_sprint_result('请选定用户', '', FAIL_CODE);
        }
        $maccount_id = Request::instance()->post('maccount_id');
        if (lw_get_current_admin_id() == $maccount_id)
        {
            return zw_sprint_result('错误操作，不允许自己禁用自己的状态', '', FAIL_CODE);
        }
        $status = Db::name('manage_account')->where(['maccount_id' => $maccount_id])->value('is_use');
        //根据当前用户状态操作
        $status_data = ['is_use' => ($status === TRUE_STATUS) ? FALSE_STATUS : TRUE_STATUS];
        $result = Db::name('manage_account')
            ->where(['maccount_id' => Request::instance()->post('maccount_id')])
            ->update($status_data);
        return $result ? zw_sprint_result('修改成功', $result) : zw_sprint_result('修改失败', '', FAIL_CODE);
    }

    /**
     *
     * 管理员账户删除
     *
     * @author  nlw
     * @date  20170412
     *
     */
    public function delete()
    {

        if (!input('post.id'))
        {
            return zw_sprint_result('请选定用户', '', FAIL_CODE);
        }
        $maccount_id = Request::instance()->post('id');
        if (lw_get_current_admin_id() == $maccount_id)
        {
            return zw_sprint_result('错误操作，不允许自己删除自己', '', FAIL_CODE);
        }
        $result = Db::name('manage_account')
            ->where(['maccount_id' => $maccount_id])
            ->delete();
        return $result ? zw_sprint_result('删除成功', $result) : zw_sprint_result('删除失败', '', FAIL_CODE);
    }


    /**
     * 搜索管理员
     * */
    public function searchAdmin()
    {
        //if (!input('get.search_info'))
        //{
        //    return zw_sprint_result('请输入搜索内容', '', FAIL_CODE);
        //}
        $map['manage_account.maccount_name|party_org_name|mreal_name|sys_role.sys_role_name|mobile_number']  = ['like','%'.Request::instance()->get('search_info').'%'];
        $result = Db::view('manage_account','*')
            ->view('sys_user_role','sys_role_id','sys_user_role.maccount_id = manage_account.maccount_id', 'left')
            ->view('sys_role','*','sys_role.sys_role_id = sys_user_role.sys_role_id', 'left')
            ->view('party_org','party_org_name,party_org_id','party_org.party_org_id= manage_account.party_org_id', 'left')
            ->where($map)
            ->order('manage_account.sort_num', 'desc')
            ->paginate(15, false, [
                'type'=> 'app\admin\driver\ZzwuAjaxPage',
                'var_page' => 'page',
                'query' => Request::instance()->param()
            ]);
        $page = $result->render();
        $result = $result->all();
        return  zw_sprint_result('获取成功', ['data' => $result, 'page' => $page]);
    }
}